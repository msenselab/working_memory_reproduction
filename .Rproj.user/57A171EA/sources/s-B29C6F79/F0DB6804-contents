---
  title: "Results of Logarithmic encoding model"
author: "Fiona Zhu"
date: "15/7/2020"
output:
  html_document:
  df_print: paged
pdf_document: default
word_document: default
---
  ```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r include=FALSE}
## Load the packages and include functions
library(rlist)
library(tidyverse)
library(rstan)

sizeInModel <- c(1, 2, 3)
colorSet3 <- scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9")) 
colorSet4 <- scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9", "#1a9641")) 
colorSet <- scale_color_manual(values=c("#d7191c", "#fdae61", "#a6d96a", "#1a9641")) 
```

Note that the WMSize in models are using 1, 2, 3 instead of 1,3,5.

```{r include=FALSE}
options(mc.cores = parallel::detectCores()-1)
rstan_options (auto_write=TRUE)
source('rstan_log.R') 
#source('rstan_linear.R')
rstanmodelPath = 'modelrlt'
modelPath = paste0(rstanmodelPath, '/models/', modelversion)
library(ggpubr)
```





```{r include=FALSE}
## read data
dat = data.frame()
readCSV <- function(fn){
  filename = paste0("../data/","Exp",toString(fn),".csv")
  read.csv(filename) %>% mutate(Exp = fn)
}

dat <- map_df(1:4, readCSV)
dur <- sort(unique(dat$curDur))
AllExpData <- dat %>% filter(valid == 1)
AllExpData$Exp = paste0('Exp', AllExpData$Exp)
AllExpData$log_RP <- log(AllExpData$repDur)
AllExpData$log_dur <- log(AllExpData$curDur)
```



###  run models to compute parameters 
```{r include=FALSE}
# function to run models on  lrz cluster parallely
runModelparallely<- function(AllExpData){
  expList <- unique(AllExpData$Exp)
  subList <- unique(AllExpData$NSub)
  for (expName in expList) {
    sub_exp_dat <- list()
    data_exp <- AllExpData %>% dplyr::filter(Exp == expName)
    data_exp$model <- expName
    sub_exp <-  split(data_exp, data_exp$NSub) # split data for each subject
    for (subNo in subList) {
      sub_exp_dat <- list.append(sub_exp_dat, sub_exp[[subNo]])
    }
    rlt <- runModelcluster(sub_exp_dat)
    saveRDS(rlt, file = paste0(getwd(), "/analysis/", modelPath, "/rlt/rlt_", expName,".rds"))
  }
}
```

```{r include=FALSE}
# function to run models on local computer
noEffect = FALSE  #when parameter noEffect is true marks all data fits with exp1 model 
if(noEffect){
  modelversion = 'log_stan_noeffect'
  modelPath = paste0(rstanmodelPath, '/models/', modelversion)
}

runModelonlocal<- function(AllExpData, myrstanModel){
  #expList <- unique(AllExpData$Exp)
  expList = c('Exp2', 'Exp3', 'Exp4')
  subList <- unique(AllExpData$NSub)
  
  for (expName in expList) {
    Allrlt <- list()
    data_exp <- AllExpData %>% dplyr::filter(Exp == expName)
    data_exp$model <- expName
    sub_exp <-  split(data_exp, data_exp$NSub) # split data for each subject
    for (subNo in subList) {
      rlt <-  funFitStan(sub_exp[[subNo]], myrstanModel, noEffect)
      saveRDS(Allrlt, file = paste0(getwd(), "/", modelPath, "/rlt/rlt_", expName,"_sub",subNo,".rds"))
      Allrlt <- list.append(Allrlt,rlt)
    }
    saveRDS(Allrlt, file = paste0(getwd(), "/", modelPath, "/rlt/rlt_", expName,".rds"))
  }
}
```

```{r include=FALSE}
  ##execute the model running parallelly
 # runModelparallely(AllExpData)

```

```{r include=FALSE}
#execute the model running locally
myrstanModel  <- stan_model(file=paste0(getwd(),"/RStanCode/", modelversion,".stan"))
runModelonlocal(AllExpData, myrstanModel)
```
