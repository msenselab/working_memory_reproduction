"0","# calculate the slope of the cv curve"
"0","cvSlope_model <- function(df) {"
"0","  lm(log(cv_obs) ~ log(curDur), data = df)"
"0","}"
"0",""
"0","mpredY <- dplyr::group_by(AllDat_predY, curDur, WMSize, Exp, NSub) %>%"
"0","  dplyr::summarize(m_repDur = mean(repDur), "
"0","                   sd_repDur = sd(repDur),"
"0","                   n = n(), "
"0","                   sd_repDur = sd(repDur),"
"0","                   m_mu_r = mean(mu_r),"
"0","                   m_sig_r = mean(sig_r),"
"0","                   wp = mean(wp),"
"0","                   log_lik =mean(log_lik))"
"1","`summarise()` has grouped output by 'curDur', 'WMSize', 'Exp'. You can override using the `.groups` argument.
"
"0","mpredY$cv_obs <- mpredY$sd_repDur/mpredY$m_repDur"
"0",""
"0","CVslopes <- mpredY %>% "
"0","  dplyr::group_by(NSub, Exp, WMSize) %>% nest()  %>%  # nested data"
"0","  mutate(model = map(data, cvSlope_model)) %>%  # linear regression"
"0","  mutate(slope = map(model, broom::tidy)) %>%  # get estimates"
"0","  unnest(slope, .drop = TRUE) %>% # remove raw data"
"0","  select(-std.error,-statistic, -p.value) %>%  # remove unnessary columns"
"0","  spread(term, estimate) %>%   # spread stimates"
"0","  dplyr::rename(obs_cv_Intercept = `(Intercept)`, obs_cv_slope = `log(curDur)`)  # rename columns"
"0","CVslopes$data = NULL"
"0","CVslopes$model = NULL"
