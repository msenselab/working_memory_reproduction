"0","# Custom function to find predicted indifference point"
"0","getPredInP_boot <- function(df, idx){"
"0","  vars <- c('NSub', 'Exp', 'WMSize')"
"0","  gp_vars = syms(vars)"
"0","  slopes <- df[idx, ] %>%"
"0","    dplyr::group_by(!!!gp_vars) %>% nest()  %>%  # nested data"
"0","    mutate(model = map(data, pred_model)) %>%  # linear regression"
"0","    mutate(slope = map(model, broom::tidy)) %>%  # get estimates out"
"0","    unnest(slope, .drop = TRUE) %>% # remove raw data"
"0","    select(-std.error,-statistic, -p.value) %>%  # remove unnessary clumns"
"0","    spread(term, estimate) %>%   # spread stimates"
"0","    dplyr::rename(minRP = `(Intercept)`, slope = curDur)  # rename columns"
"0","  slopes$inP = slopes$minRP /(1-slopes$slope)"
"0","  return(c(slopes$inP, slopes$slope))"
"0","}"
"0",""
"0",""
"0","# Custom function to find observed indifference point"
"0","getRPInP_boot <- function(df, idx){"
"0","  vars <- c('NSub', 'Exp', 'WMSize')"
"0","  gp_vars = syms(vars)"
"0","  slopes <- df[idx, ] %>%"
"0","    dplyr::group_by(!!!gp_vars) %>% nest()  %>%  # nested data"
"0","    mutate(model = map(data, obs_model)) %>%  # linear regression"
"0","    mutate(slope = map(model, broom::tidy)) %>%  # get estimates out"
"0","    unnest(slope, .drop = TRUE) %>% # remove raw data"
"0","    select(-std.error,-statistic, -p.value) %>%  # remove unnessary clumns"
"0","    spread(term, estimate) %>%   # spread stimates"
"0","    dplyr::rename(minRP = `(Intercept)`, slope = curDur)  # rename columns"
"0","  slopes$inP = slopes$minRP /(1-slopes$slope)"
"0","  return(c(slopes$inP, slopes$slope))"
"0","}"
