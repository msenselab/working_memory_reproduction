se_repDur = sd(repDur)/sqrt(n-1)), aes(x=curDur, y = m_repDur-curDur, group = WMSize, color = WMSize))  +
geom_point()+
geom_line()+
#geom_errorbar(width=.2,  aes(ymin = m_repDur - se_repDur, ymax = m_repDur + se_repDur)) +
geom_hline(yintercept = 0, linetype='dashed')+
facet_wrap(~NSub) +
labs(x="Sample intervals (s)", y="Reproduction bias in Exp 4b(s)", shape=" ", color = "Memory Load")+
theme_new+colorSet3+guides(shape="none")+
scale_x_continuous(breaks=seq(0, 1.6, 0.4))+ theme(legend.position="top")
RP_bias_obs  <- ggplot(data = AllExpData %>%
dplyr::group_by(Exp, curDur, WMSize, NSub) %>%
dplyr::summarize(n = n(),
m_repDur = mean(repDur),
se_repDur = sd(repDur)/sqrt(n-1)) %>%
dplyr::group_by(Exp, curDur, WMSize) %>%
dplyr::summarize(m_m_repDur = mean(m_repDur),
m_se_repDur = mean(se_repDur)), aes(x = curDur, y = m_m_repDur-curDur,  color=as.factor(WMSize))) +
geom_point()+
geom_line()+
#geom_errorbar(width=.2,  aes(ymin = m_m_repDur-curDur - m_se_repDur, ymax = m_m_repDur -curDur + m_se_repDur)) +
geom_hline(yintercept = 0, linetype='dashed')+
facet_grid(cols = vars(Exp)) +
labs(x="Sample intervals (s)", y="Reproduction bias(s)", shape=" ", color = "Memory Load")+
theme_new+colorSet3+guides(shape="none")+
scale_x_continuous(breaks=seq(0, 1.6, 0.4))+ theme(legend.position="top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/RP_bias_obs.png"), RP_bias_obs, width = 6, height = 4)
RP_bias_obs
# RP  <- ggplot(data = m_predY, aes(x = curDur, y = m_m_repDur,  color=WMSize, shape = as.factor('Observation'))) +
#   geom_point(size=2, alpha = 0.5)+
#   geom_line(data= m_newY, aes(x=curDur, y=m_mu_r, color=WMSize)) +
#   geom_abline(slope=1, intercept=0)+
#   facet_grid(cols = vars(Exp)) +
#   labs(x="Sample intervals (s)", y="Reproduction (s)", shape=" ", color = "Memory Load")+
#   theme_new+colorSet3+guides(shape="none")+theme_new +theme(legend.position="top")
#
# ggsave(paste0(getwd(), "/", modelPath, "/figures/RP.png"), RP, width = 6, height = 6)
#
# RP
# calculate the slope of the cv curve
RPslope_model <- function(df) {
lm(m_repDur ~ log(curDur), data = df)
}
RPslopes <- mpredY_sub %>%
dplyr::group_by(NSub, Exp, WMSize) %>% nest() %>%
mutate(model = map(data, RPslope_model)) %>%
mutate(slope = map(model, broom::tidy)) %>%  # get estimates
unnest(slope, .drop = TRUE) %>% # remove raw data
select(-std.error,-statistic, -p.value) %>%  # remove unnessary columns
spread(term, estimate) %>%   # spread stimates
dplyr::rename(Intercept = `(Intercept)`, slope = `log(curDur)`)
RPslopes$data <- NULL
RPslopes$model <- NULL
mRPslopes <- RPslopes%>% dplyr::group_by(WMSize, Exp) %>%
dplyr::summarize(m_Intercept = mean(Intercept),
m_slope = mean(slope),
n = n(),
se_slope = sd(slope)/sqrt(n-1),
se_Intercept = sd(Intercept)/sqrt(n-1))
plt_CVslope <- ggplot(mRPslopes, aes(Exp, m_slope, ymin = m_slope - se_slope, ymax = m_slope + se_slope, group =interaction(Exp, WMSize), color = factor(WMSize)), shape = factor(WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
colorSet5+
labs(x = "", y = TeX("Slope of RP"), color = 'Memory Load') +
theme_new +theme(legend.position="top")
plt_CVslope
RPslopes$WMSize = as.factor(RPslopes$WMSize)
ezANOVA(data = RPslopes, dv= slope, wid=NSub, within=.(WMSize), between = .(Exp))
ezANOVA(data = RPslopes %>% filter(Exp =='Exp1'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = RPslopes %>% filter(Exp =='Exp2'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = RPslopes %>% filter(Exp =='Exp3'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = RPslopes %>% filter(Exp =='Exp4a'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = RPslopes %>% filter(Exp =='Exp4b'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = RPslopes, dv= Intercept, wid=NSub, within=.(WMSize), between = .(Exp))
curDurItem <- unique(m_predY$curDur)
RP_CV <- ggplot(data= m_predY, aes(x=curDur, y= cv, color=WMSize, shape = as.factor('Observation'))) +
geom_point(size=2, alpha = 0.5)+
geom_line(data = m_newY, aes(x=curDur, y= m_sig_r/m_mu_r, color=WMSize)) +
facet_grid(~Exp) +
labs(x="Duration (s)", y="CV", shape=" ", color = "Memory Load")+ theme_new+
colorSet3+guides(shape="none")+theme(strip.text.x = element_blank())
RP_CV
ggsave(paste0(getwd(), "/", modelPath, "/figures/RP_CV.png"), RP_CV, width = 6, height = 6)
AllDat_predY
plt_wp <- ggplot(data = AllDat_predY %>%dplyr::group_by(NSub, Exp, WMSize) %>% dplyr::summarise(m_wp = mean(wp)) %>%dplyr::group_by(Exp, WMSize) %>% dplyr::summarise(mm_wp = mean(m_wp), n= n(), m_se_wp = sd(m_wp)/sqrt(n-1)), aes(Exp, mm_wp, ymin = mm_wp - m_se_wp, ymax = mm_wp + m_se_wp, group =interaction(Exp, WMSize), color = factor(WMSize)), shape = factor(WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
#coord_cartesian(ylim = c(0.5, 1)) +
colorSet5+
labs(x = "", y = TeX("Weight of the prior $w_p$"), color = 'Memory Load') +
theme_new + theme(legend.position="top")
plt_wp
ggsave(paste0(getwd(), "/", modelPath, "/figures/plt_wp.png"), plt_wp, width = 3, height = 3)
AllDat_newY$predErr = AllDat_newY$mu_r - AllDat_newY$curDur
temp_newY <- AllDat_newY %>% filter(curDur > 0.8, curDur < 1.1) %>% select(Exp, WMSize, NSub, predErr, curDur)
InP_curve<- temp_newY%>% dplyr::group_by(Exp, WMSize, NSub)%>%
dplyr::summarise(minErr = min(abs(predErr)), idx = which.min(abs(predErr)))
InP_curve$InP_curve = temp_newY[InP_curve$idx,]$curDur
InP_curve$y = temp_newY[InP_curve$idx,]$predErr + temp_newY[InP_curve$idx,]$curDur
InP_curve
#plot indifference points (the intersections of the Prediction curve with the diagonal)
plt_InP_curve<- ggplot(data = InP_curve%>%dplyr::group_by(Exp, WMSize)%>% dplyr::summarise(m_InP = mean(InP_curve), se_InP = sd(InP_curve)/sqrt(n()-1)), aes(x= Exp, y=m_InP, color = WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  aes(ymin = m_InP - se_InP, ymax = m_InP + se_InP), position = position_dodge(width = 0.2)) +theme_new+
labs(colour = "Memory Load")+colorSet3+
xlab(' ')+ylab("indifference point (s)")+guides(shape="none")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/plt_InP_curve.png"), plt_InP_curve, width = 3, height = 3)
plt_InP_curve
#Observed Indifference Point for Exp.4b
obs_model <- function(df) {
lm(repDur ~ curDur, data = df)
}
#Observed Indifference Point
obs_Inp_list <- AllDat_predY %>%
dplyr::group_by(NSub, Exp, WMSize, gap) %>% nest()  %>%
mutate(model = map(data, obs_model)) %>%  # linear regression
mutate(slope = map(model, broom::tidy)) %>%  # get estimates
unnest(slope, .drop = TRUE) %>% # remove raw data
select(-std.error,-statistic, -p.value) %>%  # remove unnessary columns
spread(term, estimate) %>%   # spread stimates
dplyr::rename(Intercept = `(Intercept)`, slope = curDur)  # rename columns
obs_Inp_list$model = NULL
obs_Inp_list$data = NULL
obs_Inp_list$inP = obs_Inp_list$Intercept /(1-obs_Inp_list$slope)
obs_Inp_list_no_gap <- AllDat_predY %>%
dplyr::group_by(NSub, Exp, WMSize) %>% nest()  %>%
mutate(model = map(data, obs_model)) %>%  # linear regression
mutate(slope = map(model, broom::tidy)) %>%  # get estimates
unnest(slope, .drop = TRUE) %>% # remove raw data
select(-std.error,-statistic, -p.value) %>%
spread(term, estimate) %>%   # spread stimates
dplyr::rename(Intercept = `(Intercept)`, slope = curDur)  # rename columns
obs_Inp_list_no_gap$model = NULL
obs_Inp_list_no_gap$data = NULL
obs_Inp_list_no_gap$inP = obs_Inp_list_no_gap$Intercept /(1-obs_Inp_list_no_gap$slope)
m_obs_Inp_list = obs_Inp_list %>% group_by(Exp, WMSize, gap)%>%
dplyr::summarise(n=n(),
m_Intercept = mean(Intercept),
se_Intercept= sd(Intercept)/sqrt(n-1),
m_inP = mean(inP),
se_inP = sd(inP)/sqrt(n-1),
m_slope = mean(slope),
se_slope = sd(slope)/sqrt(n-1))
plt_InP_linear_gap<- ggplot(data = m_obs_Inp_list, aes(x=WMSize, y=m_inP, group = gap, color = gap))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.3,  aes(ymin = m_inP - se_inP, ymax = m_inP + se_inP), position = position_dodge(width = 0.2)) +theme_new+
labs(colour = "Gap")+colorSet3+
facet_wrap(~Exp)+
xlab(' ')+ylab("indifference point (s)")+guides(shape="none")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/plt_InP_linear_gap.png"), plt_InP_linear_gap, width = 5, height = 5)
plt_InP_linear_gap
ezANOVA(data = obs_Inp_list%>%filter(Exp =='Exp4b'), dv= inP, wid=NSub, within= .(gap, WMSize) )
plt_RP_slope_linear_gap<- ggplot(data = m_obs_Inp_list, aes(x= WMSize, y=m_slope, group = gap,color = gap, shape = gap))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.3,  aes(ymin = m_slope - se_slope, ymax = m_slope + se_slope), position = position_dodge(width = 0.2)) +theme_new+
facet_wrap(~Exp)+
labs(colour = "Gap", shape = "Gap")+colorSet3+
xlab(' ')+ylab("Slope of reproduction (s)")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/plt_RP_slope_linear_gap.png"), plt_RP_slope_linear_gap, width = 5, height = 5)
plt_RP_slope_linear_gap
# plot the observed indifference points and slopes of RP
plt_obs_InP_slope_err<- ggplot(data = obs_Inp_list %>% group_by(Exp, WMSize)%>%
dplyr::summarise(n=n(),
m_inP = mean(inP),
se_inP = sd(inP)/sqrt(n-1),
m_slope = mean(slope),
se_slope = sd(slope)/sqrt(n-1)), aes(x= m_slope, y=m_inP, color = WMSize))+
geom_line(stat = "identity")+
geom_point(stat = "identity")+
geom_errorbar(width = 0.02, aes(ymin = m_inP - se_inP, ymax = m_inP + se_inP)) +
geom_errorbarh(height =0.02, aes(xmin = m_slope - se_slope, xmax = m_slope + se_slope)) +
theme_new+
labs(colour = "Memory Load")+colorSet3+
facet_grid(~Exp)+
xlab('slope of reproduction')+ylab("indifference point (s)")+guides(shape="none")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/plt_obs_InP_slope_err.png"), plt_obs_InP_slope_err, width = 5, height = 5)
plt_obs_InP_slope_err
ezANOVA(data = obs_Inp_list_no_gap %>% filter(Exp =='Exp1'), dv= inP, wid=NSub, within = .(WMSize))
ezANOVA(data = obs_Inp_list_no_gap %>% filter(Exp =='Exp2'), dv= inP, wid=NSub, within = .(WMSize))
ezANOVA(data = obs_Inp_list_no_gap %>% filter(Exp =='Exp3'), dv= inP, wid=NSub, within = .(WMSize))
ezANOVA(data = obs_Inp_list_no_gap %>% filter(Exp =='Exp4a'), dv= inP, wid=NSub, within = .(WMSize))
ezANOVA(data = obs_Inp_list %>% filter(Exp =='Exp4b'), dv= inP, wid=NSub, within = .(WMSize, gap))
ezANOVA(data = obs_Inp_list_no_gap %>% filter(Exp =='Exp1'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = obs_Inp_list_no_gap %>% filter(Exp =='Exp2'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = obs_Inp_list_no_gap %>% filter(Exp =='Exp3'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = obs_Inp_list_no_gap %>% filter(Exp =='Exp4a'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = obs_Inp_list %>% filter(Exp =='Exp4b'), dv= slope, wid=NSub, within = .(WMSize, gap))
#Predicated Indifference Point for Exp.4b
pred_model <- function(df) {
lm(mu_r ~ curDur, data = df)
}
pred_Inp_list <- AllDat_predY %>%
dplyr::group_by(NSub, Exp, WMSize, gap) %>% nest()  %>%
mutate(model = map(data, pred_model)) %>%  # linear regression
mutate(slope = map(model, broom::tidy)) %>%  # get estimates
unnest(slope, .drop = TRUE) %>% # remove raw data
select(-std.error,-statistic, -p.value) %>%  # remove unnessary columns
spread(term, estimate) %>%   # spread stimates
dplyr::rename(Intercept = `(Intercept)`, pred_slope = curDur)  # rename columns
pred_Inp_list$model = NULL
pred_Inp_list$data = NULL
pred_Inp_list$pred_inP = pred_Inp_list$Intercept /(1-pred_Inp_list$pred_slope)
pred_Inp_slope_no_gap <- AllDat_predY %>%
dplyr::group_by(NSub, Exp, WMSize) %>% nest()  %>%
mutate(model = map(data, pred_model)) %>%  # linear regression
mutate(slope = map(model, broom::tidy)) %>%  # get estimates
unnest(slope, .drop = TRUE) %>% # remove raw data
select(-std.error,-statistic, -p.value) %>%  # remove unnessary columns
spread(term, estimate) %>%   # spread stimates
dplyr::rename(Intercept = `(Intercept)`, pred_slope = curDur)  # rename columns
pred_Inp_slope_no_gap$model = NULL
pred_Inp_slope_no_gap$data = NULL
pred_Inp_slope_no_gap$pred_inP = pred_Inp_slope_no_gap$Intercept /(1-pred_Inp_slope_no_gap$pred_slope)
m_pred_Inp_slope_no_gap = pred_Inp_slope_no_gap %>% group_by(Exp, WMSize)%>%
dplyr::summarise(n=n(),
m_Intercept = mean(Intercept),
se_Intercept= sd(Intercept)/sqrt(n-1),
m_pred_inP = mean(pred_inP),
se_pred_inP = sd(pred_inP)/sqrt(n-1),
m_pred_slope = mean(pred_slope),
se_pred_slope = sd(pred_slope)/sqrt(n-1))
# plot the observed indifference points and slopes of RP
plt_pred_InP_slope_err<- ggplot(data = m_pred_Inp_slope_no_gap, aes(x= m_pred_slope, y=m_pred_inP, color = WMSize))+
geom_line(stat = "identity")+
geom_errorbar(width = 0.02, aes(ymin = m_pred_inP - se_pred_inP, ymax = m_pred_inP + se_pred_inP)) +
geom_errorbarh(height =0.02, aes(xmin = m_pred_slope - se_pred_slope, xmax = m_pred_slope + se_pred_slope)) +
geom_point(data = obs_Inp_list%>% group_by(Exp, WMSize)%>%
dplyr::summarise(n=n(),
m_inP = mean(inP),
se_inP = sd(inP)/sqrt(n-1),
m_slope = mean(slope),
se_slope = sd(slope)/sqrt(n-1)), aes(x= m_slope, y =m_inP, color = WMSize))+
theme_new+
labs(colour = "Memory Load")+colorSet3+
facet_grid(~Exp)+
xlab('slope of reproduction')+ylab("indifference point (s)")+guides(shape="none")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/plt_pred_InP_slope_err.png"), plt_pred_InP_slope_err, width = 5, height = 5)
plt_pred_InP_slope_err
InP_obs<-  ggplot(data = obs_Inp_list_no_gap %>%dplyr::group_by(WMSize, Exp) %>%dplyr::summarise(m_inP = mean(inP), se_inP = sd(inP)/sqrt(n()-1)), aes(x= Exp, y=m_inP, color = WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  aes(ymin = m_inP - se_inP, ymax = m_inP + se_inP), position = position_dodge(width = 0.2)) +theme_new+
labs(colour = "Memory Load")+colorSet3+
xlab(' ')+ylab("observed indifference point (s)")+guides(shape="none")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/InP_obs.png"), InP_obs, width = 3, height = 3)
InP_obs
InP_pred<-  ggplot(data = m_pred_Inp_slope_no_gap, aes(x= Exp, y=m_pred_inP, color = WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  aes(ymin = m_pred_inP - se_pred_inP, ymax = m_pred_inP + se_pred_inP), position = position_dodge(width = 0.2)) +theme_new+
labs(colour = "Memory Load")+colorSet3+
xlab(' ')+ylab("indifference point (s)")+guides(shape="none")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/InP_pred.png"), InP_pred, width = 3, height = 3)
InP_pred
RP_Exp2  <- ggplot(data = m_predY%>% filter(Exp == 'Exp2'), aes(x = curDur, y = m_m_repDur,  color=WMSize, shape = as.factor('Observation'))) +
geom_point(size=2, alpha = 0.5)+
geom_segment(data =m_obs_Inp_list%>%filter(Exp == 'Exp2'), aes(x = 0.3, y = 0.3*m_slope+m_Intercept, xend = 2.2, yend = 2.2*m_slope+m_Intercept), arrow = NULL)+  ##dotted lines
geom_point(data =m_obs_Inp_list%>% filter(Exp == 'Exp2'), aes(x = m_inP, y = 0.1, color=WMSize), shape=21) + ## Intersection
geom_segment(data =m_obs_Inp_list%>% filter(Exp == 'Exp2'), aes(x=m_inP, y = 0.1, xend = m_inP, yend = m_inP), arrow = NULL)+ ##vertical lines for Intersection
#geom_line(data= m_newY%>% filter(Exp == 'Exp2'), aes(x=curDur, y=m_mu_r, color=WMSize)) +
geom_abline(slope=1, intercept=0, linetype = 2)+
labs(x="Sample intervals (s)", y="Reproduction (s)", shape=" ", color = "Memory Load")+
theme_new+colorSet3+guides(shape="none")+ ylim(0,2)
ggsave(paste0(getwd(), "/", modelPath, "/figures/RP_Exp2.png"), RP_Exp2, width = 4, height = 4)
RP_Exp2
ezANOVA(data = pred_Inp_slope_no_gap %>% filter(Exp =='Exp1'), dv= pred_inP, wid=NSub, within = .(WMSize))
ezANOVA(data = pred_Inp_slope_no_gap %>% filter(Exp =='Exp2'), dv= pred_inP, wid=NSub, within = .(WMSize))
ezANOVA(data = pred_Inp_slope_no_gap %>% filter(Exp =='Exp3'), dv= pred_inP, wid=NSub, within = .(WMSize))
ezANOVA(data = pred_Inp_slope_no_gap %>% filter(Exp =='Exp4a'), dv= pred_inP, wid=NSub, within = .(WMSize))
ezANOVA(data = pred_Inp_list %>% filter(Exp =='Exp4b'), dv= pred_inP, wid=NSub, within = .(WMSize, gap))
ezANOVA(data = pred_Inp_slope_no_gap %>% filter(Exp =='Exp1'), dv= pred_slope, wid=NSub, within = .(WMSize))
ezANOVA(data = pred_Inp_slope_no_gap %>% filter(Exp =='Exp2'), dv= pred_slope, wid=NSub, within = .(WMSize))
ezANOVA(data = pred_Inp_slope_no_gap %>% filter(Exp =='Exp3'), dv= pred_slope, wid=NSub, within = .(WMSize))
ezANOVA(data = pred_Inp_slope_no_gap %>% filter(Exp =='Exp4a'), dv= pred_slope, wid=NSub, within = .(WMSize))
#ezANOVA(data = pred_Inp_list %>% filter(Exp =='Exp4b'), dv= pred_inP, wid=NSub, within = .(WMSize, gap))
Inp_list_no_gap = left_join(obs_Inp_list_no_gap, pred_Inp_slope_no_gap, by = c("NSub", "Exp", "WMSize"))
Inp_list_no_gap$InP_err = Inp_list_no_gap$pred_inP -Inp_list_no_gap$inP
Inp_list_no_gap$InP_rerr = 100*Inp_list_no_gap$InP_err/ Inp_list_no_gap$inP
Inp_list_no_gap$slope_err = Inp_list_no_gap$pred_slope - Inp_list_no_gap$slope
Inp_list_no_gap$slope_rerr = 100* Inp_list_no_gap$slope_err/Inp_list_no_gap$slope
m_Inp_list_no_gap = Inp_list_no_gap %>% dplyr::group_by(Exp) %>% dplyr::summarise(m_InP_rerr = mean(InP_rerr), m_slope_rerr = mean(slope_rerr), m_InP_rerr_abs = mean(abs(InP_rerr)), m_slope_rerr_abs = mean(abs(slope_rerr)))
m_Inp_list_no_gap$InP_auc = 100- m_Inp_list_no_gap$m_InP_rerr_abs
m_Inp_list_no_gap$slope_auc = 100-  m_Inp_list_no_gap$m_slope_rerr_abs
# Custom function to find predicted indifference point
getPredInP_boot <- function(df, idx){
vars <- c('NSub', 'Exp', 'WMSize')
gp_vars = syms(vars)
slopes <- df[idx, ] %>%
dplyr::group_by(!!!gp_vars) %>% nest()  %>%  # nested data
mutate(model = map(data, pred_model)) %>%  # linear regression
mutate(slope = map(model, broom::tidy)) %>%  # get estimates out
unnest(slope, .drop = TRUE) %>% # remove raw data
select(-std.error,-statistic, -p.value) %>%  # remove unnessary clumns
spread(term, estimate) %>%   # spread stimates
dplyr::rename(minRP = `(Intercept)`, slope = curDur)  # rename columns
slopes$inP = slopes$minRP /(1-slopes$slope)
return(c(slopes$inP, slopes$slope))
}
# Custom function to find observed indifference point
getRPInP_boot <- function(df, idx){
vars <- c('NSub', 'Exp', 'WMSize')
gp_vars = syms(vars)
slopes <- df[idx, ] %>%
dplyr::group_by(!!!gp_vars) %>% nest()  %>%  # nested data
mutate(model = map(data, obs_model)) %>%  # linear regression
mutate(slope = map(model, broom::tidy)) %>%  # get estimates out
unnest(slope, .drop = TRUE) %>% # remove raw data
select(-std.error,-statistic, -p.value) %>%  # remove unnessary clumns
spread(term, estimate) %>%   # spread stimates
dplyr::rename(minRP = `(Intercept)`, slope = curDur)  # rename columns
slopes$inP = slopes$minRP /(1-slopes$slope)
return(c(slopes$inP, slopes$slope))
}
#calculate the bootstrapped 95% confidence intervals
generateCI = FALSE # tag for generation CI
if(generateCI){
cilist <- NULL
for(expname in unique(AllDat_predY$Exp)){
for(nsub in unique(AllDat_predY$NSub)){
for(WMsize in unique(AllDat_predY$WMSize)){
dat = AllDat_predY %>% filter(Exp == expname, NSub == nsub, WMSize ==WMsize)
set.seed(100)
num = 1000
bs_predInP <- boot(dat, getPredInP_boot, R = num)
bs_RPInP <- boot(dat, getRPInP_boot, R = num)
ci = data.frame(
Exp = expname,
NSub = nsub,
WMSize = WMsize,
sd_predInP_boot = sd(bs_predInP$t[,1]),
m_predInP_boot = median(bs_predInP$t[,1]),
sd_RPInP_boot = sd(bs_RPInP$t[,1]),
mRP_InP_boot = median(bs_RPInP$t[,1]),
sd_pred_slope_boot = sd(bs_predInP$t[,2]),
m_pred_slope_boot = median(bs_predInP$t[,2]),
sd_RP_slope_boot = sd(bs_RPInP$t[,2]),
mRP_slope_boot = median(bs_RPInP$t[,2])
)
cilist = data.frame(rbind(cilist, ci))
}
}
}
write.csv(cilist, file = paste0("ci_list_median_1000.csv"))
}
# load the generated indifference point values and mark the outlier
cilist = read.csv(paste0("ci_list_median_1000.csv"))
cilist$Exp = as.factor(cilist$Exp)
cilist$WMSize= as.factor(cilist$WMSize)
cilist$inPOutlier = FALSE
cilist[which(cilist$mRP_InP_boot > 1.7 |cilist$mRP_InP_boot < 0.5 | cilist$m_predInP_boot < 0.5|cilist$m_predInP_boot > 1.7),"inPOutlier"] = TRUE
#check if the outlier is the same as the outliers in variable slope_pr
cilist%>% filter(inPOutlier == TRUE)
library(Rmisc)
mCI <- cilist%>% filter(inPOutlier == FALSE) %>% dplyr::group_by(Exp, WMSize) %>%
dplyr::summarise(n = n(),
m_RPInP_boot = mean(mRP_InP_boot),
m_predInP_boot = mean(m_predInP_boot),
m_sd_predInP_boot = mean(sd_predInP_boot),
m_sd_RPInP_boot= mean(sd_RPInP_boot),
m_RPSlope_boot = mean(mRP_slope_boot),
m_predSlope_boot = mean(m_pred_slope_boot),
m_sd_predSlope_boot = mean(sd_pred_slope_boot),
m_sd_RPSlope_boot= mean(sd_RP_slope_boot))
ezANOVA(data = cilist %>% filter(Exp =='Exp1'), dv=mRP_InP_boot, wid=NSub, within = .(WMSize))
ezANOVA(data = cilist %>% filter(Exp =='Exp1'), dv=m_predInP_boot, wid=NSub, within = .(WMSize))
ezANOVA(data = cilist %>% filter(Exp =='Exp2'), dv=mRP_InP_boot, wid=NSub, within = .(WMSize))
ezANOVA(data = cilist %>% filter(Exp =='Exp2'), dv=m_predInP_boot, wid=NSub, within = .(WMSize))
ezANOVA(data = cilist %>% filter(Exp =='Exp3'), dv= mRP_InP_boot, wid=NSub, within = .(WMSize))
ezANOVA(data = cilist %>% filter(Exp =='Exp3'), dv=m_predInP_boot, wid=NSub, within = .(WMSize))
ezANOVA(data = cilist %>% filter(Exp =='Exp4a'), dv= mRP_InP_boot, wid=NSub, within = .(WMSize))
ezANOVA(data = cilist %>% filter(Exp =='Exp4a'), dv=m_predInP_boot, wid=NSub, within = .(WMSize))
#ezANOVA(data = cilist_exp4b %>% filter(Exp =='Exp4b'), dv= pred_inP, wid=NSub, within = .(WMSize, gap))
#plot the predicated indifference points and slope of predicated RP
plt_pred_InP_slope_err<- ggplot(data = obs_Inp_list_no_gap%>% dplyr::group_by(Exp, WMSize)%>%
dplyr::summarise(n=n(),
m_inP = mean(inP),
se_inP = sd(inP)/sqrt(n-1),
m_slope = mean(slope),
se_slope = sd(slope)/sqrt(n-1)), aes(x= m_slope, y=m_inP, color = WMSize))+
geom_line(stat = "identity")+
geom_point(stat = "identity")+
geom_errorbar(width = 0.02, aes(ymin = m_inP - se_inP, ymax = m_inP + se_inP)) +
geom_errorbarh(height =0.02, aes(xmin = m_slope - se_slope, xmax = m_slope + se_slope)) +
theme_new+
labs(colour = "Memory Load")+colorSet3+
facet_grid(~Exp)+
xlab('slope of reproduction')+ylab("indifference point (s)")+guides(shape="none")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/plt_pred_InP_slope_err.png"), plt_pred_InP_slope_err, width = 5, height = 5)
plt_pred_InP_slope_err
## Figures in the MS
fig3<-ggarrange(RP_bias, plt_pred_InP_slope_err, common.legend = TRUE, ncol=1, nrow=2,  labels = c("a", "b"))
ggsave(paste0(getwd(), "/", modelPath, "/figures/fig3.png"), fig3, width = 6, height = 5)
fig3
mpredY_sub$RP_Bias = mpredY_sub$m_repDur-mpredY_sub$curDur
RP_bias_Anova <- ezANOVA(data = mpredY_sub, dv= RP_Bias, wid=NSub, within= .(curDur, WMSize), between = .(Exp), detailed = TRUE, return_aov = FALSE )
RP_bias_Anova
# main effect of Duration  F(1.177, 3.532) = 377.965, p < .001, ηp² = .863.
(RP_bias_Anova$ANOVA)$DFn[3] *(RP_bias_Anova$`Sphericity Corrections`)$GGe[1]
(RP_bias_Anova$ANOVA)$DFd[3] *(RP_bias_Anova$`Sphericity Corrections`)$GGe[1]
#Duration × Experiment,  F(12, 240) = 2.506, p = .004, ηp² = .111
(RP_bias_Anova$ANOVA)$DFn[5] *(RP_bias_Anova$`Sphericity Corrections`)$GGe[2]
(RP_bias_Anova$ANOVA)$DFd[5] *(RP_bias_Anova$`Sphericity Corrections`)$GGe[2]
mpredY_sub <- ungroup(mpredY_sub)
res.aov <-  rstatix::anova_test(data = mpredY_sub, dv = RP_Bias, wid = NSub, within = c(curDur, WMSize), between = Exp)
get_anova_table(res.aov, correction = "GG")
ezANOVA(data = Bayparlist, dv= sig_pr2_log, wid=NSub, between = .(Exp))
ezANOVA(data = Bayparlist, dv= sig_mn2, wid=NSub, between = .(Exp))
ezANOVA(data = Bayparlist, dv= ls, wid=NSub, between = .(Exp))
ezANOVA(data = Bayparlist, dv= ts, wid=NSub, between = .(Exp))
ezANOVA(data = Bayparlist, dv= ks, wid=NSub, between = .(Exp))
ezANOVA(data = Bayparlist, dv= mu_pr, wid=NSub, between = .(Exp))
fig4<-ggarrange(plt_wp, InP_pred, common.legend = TRUE, ncol=2, nrow=1,  labels = c("a", "b"))
ggsave(paste0(getwd(), "/", modelPath, "/figures/fig4.png"), fig4, width = 6, height = 3)
fig4
fig5<-ggarrange(RP_bias_obs, plt_pred_InP_slope_err, common.legend = TRUE, ncol=1, nrow=2, labels = c("a", "b"))
ggsave(paste0(getwd(), "/", modelPath, "/figures/fig5.png"), fig5, width = 6, height = 5)
fig5
ezANOVA(data = Bayparlist, dv= sig_s2, wid=NSub, between = .(Exp))
##independent T test
t.test((Bayparlist%>%filter(Exp %in%c('Exp1')))$sig_s2)
t.test((Bayparlist%>%filter(Exp %in%c('Exp2')))$sig_s2)
t.test((Bayparlist%>%filter(Exp %in%c('Exp3')))$sig_s2)
t.test((Bayparlist%>%filter(Exp %in%c('Exp4a')))$sig_s2)
t.test((Bayparlist%>%filter(Exp %in%c('Exp4b')))$sig_s2)
m_predErr_sub<- mpredY_sub%>%
dplyr::group_by(Exp, WMSize, NSub) %>% dplyr::summarise(
mpredRP_err=mean(predRP_err),
mpredVar_err=mean(predVar_err),
mpredcv_err = mean(predcv_err),
mpredRP_rerr = mean(predRP_rerr),
mpredVar_rerr = mean(predVar_rerr),
mpredcv_rerr = mean(predcv_rerr))
m_predErr<- m_predY%>%
dplyr::group_by(Exp, WMSize) %>% dplyr::summarise(
mmpredcv_err = mean(mpredcv_err),
mmpredRP_err=mean(mpredRP_err),
mmpredVar_err=mean(mpredVar_err),
mmpredRP_rerr = mean(mpredRP_rerr),
mmpredVar_rerr = mean(mpredVar_rerr),
mmpredcv_rerr = mean(mpredcv_rerr))
m_predErr
plt_rErrorScatter = ggplot(m_predErr_sub, aes(mpredRP_rerr*100, mpredcv_rerr*100, color = WMSize, alpha = .9)) +
#geom_hline(yintercept = 0, linetype='dashed')+ geom_vline(xintercept = 0, linetype='dashed')+
geom_point() +
geom_point(data = m_predErr, aes(mmpredRP_rerr*100, mmpredcv_rerr*100, color = WMSize, alpha = .9, size = 1 ))+
xlab('Relative prediction error of reproduction mean(%)')+ ylab('Relative prediction error of CV (%)')+colorSet3+
facet_wrap(~Exp)+
theme_new+ theme(legend.position = 'top')+guides(size="none")+guides(alpha="none")
plt_rErrorScatter
plt_rErrorScatter = ggplot(m_predErr_sub, aes(mpredRP_rerr*100, mpredVar_rerr*100, color = WMSize, alpha = .9)) +
#geom_hline(yintercept = 0, linetype='dashed')+ geom_vline(xintercept = 0, linetype='dashed')+
geom_point() +
geom_point(data = m_predErr, aes(mmpredRP_rerr*100, mmpredVar_rerr*100, color = WMSize, alpha = .9, size = 1 ))+
xlab('Relative prediction error in the RP means (%)')+ ylab('Relative prediction error in the RP variance (%)')+colorSet3+
facet_wrap(~Exp)+
theme_new+ theme(legend.position = 'top')+guides(size="none")+guides(alpha="none")
plt_rErrorScatter
plt_ErrorScatter = ggplot(m_predErr_sub, aes(mpredRP_err, mpredVar_err, color = WMSize, alpha = .9)) +
geom_hline(yintercept = 0, linetype='dashed')+ geom_vline(xintercept = 0, linetype='dashed')+
geom_point() +
geom_point(data = m_predErr, aes(mmpredRP_err, mmpredVar_err, color = WMSize, alpha = .9, size = 1 ))+
xlab('Prediction error in the RP means (s)')+ ylab('Prediction error in the RP variance (s)')+colorSet3+
facet_wrap(~Exp)+
theme_new+ theme(legend.position = 'top')+guides(size="none")+guides(alpha="none")
ggsave(paste0(getwd(), "/", modelPath, "/figures/plt_ErrorScatter.png"), plt_ErrorScatter, width = 7, height = 4)
plt_ErrorScatter
m_predErr_sub$model = 'logarithmic'
m_predErr$model = 'logarithmic'
linear_model = 'linear_rstan'
m_predErr_linear = read.csv(paste0(getwd(), "/", rstanmodelPath, '/models/', linear_model, "/rlt/m_predErr_", linear_model, ".csv"))
paste0(getwd(), "/", rstanmodelPath, '/models/', linear_model, "/rlt/m_predErr_", linear_model, ".csv")
rstanmodelPath
m_predErr_sub$model = 'logarithmic'
m_predErr$model = 'logarithmic'
linear_model = 'linear_rstan'
m_predErr_linear = read.csv(paste0(getwd(), "/", rstanmodelPath, '/models/', modelversion, "/rlt/m_predErr_", linear_model, ".csv"))
paste0(getwd(), "/", rstanmodelPath, '/models/', modelversion, "/rlt/m_predErr_", linear_model, ".csv")
m_predErr_sub$model = 'logarithmic'
m_predErr$model = 'logarithmic'
linear_model = 'linear_rstan'
m_predErr_linear = read.csv(paste0(getwd(), "/", rstanmodelPath, '/models/', modelversion, "/rlt/m_predErr_", modelversion, ".csv"))
read_csv("analysis/modelrlt/models/gap_linear_rstan/rlt/m_predErr_gap_linear_rstan.csv")
paste0(getwd(), "/", rstanmodelPath, '/models/', modelversion, "/rlt/m_predErr_", modelversion, ".csv")
m_predErr_sub$model = 'logarithmic'
m_predErr$model = 'logarithmic'
linear_model = 'gap_linear_rstan'
m_predErr_linear = read.csv(paste0(getwd(), "/", rstanmodelPath, '/models/', linear_model, "/rlt/m_predErr_", linear_model, ".csv"))
m_predErr_linear$X = NULL
m_predErr_sub_linear = read.csv(paste0(getwd(), "/", rstanmodelPath, '/models/', linear_model, "/rlt/m_predErr_sub_", linear_model, ".csv"))
m_predErr_sub_all = rbind(m_predErr_sub, m_predErr_sub_linear)
m_predErr_all = rbind(m_predErr, m_predErr_linear)
m_predErr_sub$model = 'logarithmic'
m_predErr$model = 'logarithmic'
linear_model = 'gap_linear_rstan'
m_predErr_linear = read.csv(paste0(getwd(), "/", rstanmodelPath, '/models/', linear_model, "/rlt/m_predErr_", linear_model, ".csv"))
m_predErr_linear$X = NULL
m_predErr_sub_linear = read.csv(paste0(getwd(), "/", rstanmodelPath, '/models/', linear_model, "/rlt/m_predErr_sub_", linear_model, ".csv"))
m_predErr_sub_linear$X = NULL
m_predErr_sub_all = rbind(m_predErr_sub, m_predErr_sub_linear)
m_predErr_all = rbind(m_predErr, m_predErr_linear)
