wmsize = unique(temp$WMSize)
temp$WMSize = NULL
colnames(temp) = c('Exp',  'NSub', paste0('Intercept_',wmsize), paste0('CV_Slope_',wmsize))
if(i == 1)
CVslopes_spss = temp
else
CVslopes_spss = left_join(CVslopes_spss, temp, by=c("Exp",  "NSub"))
}
write_csv(CVslopes_spss, paste0(modelPath, '/rlt/Sub_CV_slopes.csv'))
mCVslopes <- CVslopes%>% dplyr::group_by(WMSize, Exp) %>%
dplyr::summarize(m_Intercept = mean(Intercept),
m_slope = mean(slope),
n = n(),
se_slope = sd(slope)/sqrt(n-1),
se_Intercept = sd(Intercept)/sqrt(n-1))
plt_CVslope <- ggplot(mCVslopes, aes(Exp, m_slope, ymin = m_slope - se_slope, ymax = m_slope + se_slope, group =interaction(Exp, WMSize), color = factor(WMSize)), shape = factor(WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
#coord_cartesian(ylim = c(0.5, 1)) +
colorSet4+
labs(x = "", y = TeX("Mean slope of CV curve"), color = 'Memory Load') +
theme_new
plt_CVslope
ggsave(paste0(getwd(), "/figures/plt_CVslope.png"), plt_CVslope, width = 4, height = 4)
RP_CV_slope <- ggplot(data= m_predY, aes(x=log(curDur), y= log(m_sd_repDur/m_m_repDur) , color=WMSize, shape = as.factor('Observation'))) +
geom_point(size=2, alpha = 0.5)+
geom_abline(data = mCVslopes, aes(intercept = m_Intercept, slope = m_slope, color=WMSize)) +
facet_grid(~Exp) +
labs(x="logarithmic duration (s)", y=" logarithmic CV", shape=" ", color = "Memory Load")+
theme_new+
theme(strip.background = element_blank(),
strip.text.x = element_blank())+
colorSet3 +xlim(-0.8, 0.6)
RP_CV_slope
ggsave(paste0(getwd(), "/", modelPath, "/figures/RP_CV_slope.png"), RP_CV_slope, width = 6, height = 3)
colnames  = c("sig_s","ks", "ls","kr", "mu_pr", "sig_pr2", "sig_mn", "waic", "wbic")
Bayparlist_subset = Bayparlist[,!names(Bayparlist) %in% colnames]
melt_columns <- c("ls", "ks", "kr", "WMCrr", "wp", "sig_post2", "InP", "se_WMCrr")
Bayparlist_melt <- Bayparlist_subset %>%
unite(newcol1, ls_1, ks_1, kr_1, m_WMCrr_1, wp_1, sig_post2_1, InP_1, se_WMCrr_1)%>%
unite(newcol3, ls_3, ks_3, kr_3, m_WMCrr_3, wp_3, sig_post2_3, InP_3, se_WMCrr_3)%>%
unite(newcol5, ls_5, ks_5, kr_5, m_WMCrr_5, wp_5, sig_post2_5, InP_5, se_WMCrr_5)%>%
melt(id.vars = c("Nsub", "Exp", "model")) %>%
dplyr::rename(
wmsize = variable,
newcol = value
)%>%
separate(newcol, melt_columns, sep = "_")
Bayparlist_melt$wmsize = substring(Bayparlist_melt$wmsize, 7,7)
Bayparlist_melt$wmsize = as.factor(Bayparlist_melt$wmsize)
for (mycolumn in melt_columns) {
Bayparlist_melt[,mycolumn] = as.numeric(Bayparlist_melt[,mycolumn])
}
mm_Baypar_melt <- Bayparlist_melt %>%
dplyr::group_by(Exp, wmsize) %>%
dplyr::summarise(m_ls = mean(ls),   ###here ls is multified with working load size
n = n(),
se_ls = sd(ls)/ sqrt(n-1),
m_ks = mean(ks),
se_ks = sd(ks)/ sqrt(n-1),
m_kr = mean(kr),
se_kr = sd(kr)/ sqrt(n-1),
m_WMCrr = mean(WMCrr),
se_WMCrr = sd(WMCrr)/ sqrt(n-1),
m_wp = mean(wp),
se_wp = sd(wp)/ sqrt(n-1),
m_sig_post2 = mean(sig_post2),
se_sig_post2 = sd(sig_post2)/ sqrt(n-1),
m_InP = mean(InP),
se_InP = sd(InP)/ sqrt(n-1))
### save the model results
write.csv(Bayparlist,paste0(modelPath, '/rlt/Sub_Baypar.csv'))
write.csv(mm_Baypar,paste0(modelPath, '/rlt/mBaypar.csv'))
write.csv(mm_Baypar_melt,paste0(modelPath, '/rlt/mm_Baypar_se.csv'))
write.csv(CVslopes,paste0(modelPath, '/rlt/CVslopes.csv'))
mm_Baypar_melt$wmsize = as.factor(mm_Baypar_melt$wmsize)
mm_Baypar_melt$Exp = as.factor(mm_Baypar_melt$Exp)
levels(mm_Baypar_melt$wmsize) <- c("Low", "Medium", "High")
plt_wp <- ggplot(mm_Baypar_melt, aes(Exp, m_wp, ymin = m_wp - se_wp, ymax = m_wp + se_wp, group =interaction(Exp, wmsize), color = factor(wmsize)), shape = factor(wmsize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
#coord_cartesian(ylim = c(0.5, 1)) +
colorSet4+
labs(x = "", y = TeX("Mean central tendency indices $w_p$"), color = 'Memory Load') +
theme_new
plt_wp
ggsave(paste0(getwd(), "/figures/plt_wp.png"), plt_wp, width = 4, height = 4)
#plot indifferent points mean and error bar (based on the results calculated by equation)
plt_InP <- ggplot(mm_Baypar_melt
, aes(Exp, m_InP, ymin = m_InP - se_InP, ymax = m_InP + se_InP, group =interaction(Exp, wmsize), color = factor(wmsize)), shape = factor(wmsize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
#coord_cartesian(ylim = c(0.5, 1)) +
colorSet4+
labs(x = "", y = TeX("Mean indifferent points"), color = 'Memory Load') +
theme_new
plt_InP
ggsave(paste0(getwd(), "/figures/plt_InP.png"), plt_InP, width = 4, height = 4)
#plot indifferent points mean and error bar (fitting curve results)
plt_InP_fitting <- ggplot(meanInP, aes(Exp, mInP, ymin = mInP - seInP, ymax = mInP + seInP, group =interaction(Exp, WMSize), color = factor(WMSize)), shape = factor(WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
#coord_cartesian(ylim = c(0.5, 1)) +
colorSet4+
labs(x = "", y = TeX("Mean indifferent points"), color = 'Memory Load') +
theme_new
plt_InP_fitting
ggsave(paste0(getwd(), "/figures/plt_InP_fitting.png"), plt_InP_fitting, width = 4, height = 4)
fig4<-ggarrange(plt_wp, plt_InP,  common.legend = TRUE, ncol=2,   labels = c("a", "b"))
ggsave(paste0(getwd(), "/", modelPath, "/figures/fig4.png"), fig4, width = 8, height = 4)
fig4
m_predErr_sub<- m_predY_sub%>%
dplyr::group_by(Exp, WMSize, NSub) %>% dplyr::summarise(
mpredRP_err=mean(predRP_err),
mpredVar_err=mean(predVar_err),
mpredRP_rerr = mean(predRP_rerr),
mpredVar_rerr = mean(predVar_rerr),
mpredcv_rerr = mean(predcv_rerr),
mpredcv_err = mean(predcv_err))
m_predErr<- m_predY%>%
dplyr::group_by(Exp, WMSize) %>% dplyr::summarise(
mmpredRP_err=mean(mpredRP_err),
mmpredVar_err=mean(mpredVar_err),
mmpredRP_rerr = mean(mpredRP_rerr),
mmpredVar_rerr = mean(mpredVar_rerr),
mmpredcv_rerr = mean(mpredcv_rerr),
mmpredcv_err = mean(mpredcv_err))
m_predErr_sub$model = 'linear'
m_predErr$model = 'linear'
write.csv(m_predErr_sub, paste0(getwd(), "/", modelPath, "/rlt/m_predErr_sub_", modelversion, ".csv"))
write.csv(m_predErr, paste0(getwd(), "/", modelPath, "/rlt/m_predErr_", modelversion, ".csv"))
ggplot(m_predErr_sub, aes(mpredRP_rerr*100, mpredcv_rerr*100, color = WMSize, alpha = .9)) +
#geom_hline(yintercept = 0, linetype='dashed')+ geom_vline(xintercept = 0, linetype='dashed')+
geom_point() +
geom_point(data = m_predErr, aes(mmpredRP_rerr*100, mmpredcv_rerr*100, color = WMSize, alpha = .9, size = 1 ))+
xlab('Relative prediction error in the RP means (%)')+ ylab('Relative prediction error of CV (%)')+colorSet3+
facet_wrap(~Exp)+
theme_new+ theme(legend.position = 'top')+guides(size="none")+guides(alpha="none")
plt_rErrorScatter = ggplot(m_predErr_sub, aes(mpredRP_rerr*100, mpredVar_rerr*100, color = WMSize, alpha = .9)) +
#geom_hline(yintercept = 0, linetype='dashed')+ geom_vline(xintercept = 0, linetype='dashed')+
geom_point() +
geom_point(data = m_predErr, aes(mmpredRP_rerr*100, mmpredVar_rerr*100, color = WMSize, alpha = .9, size = 1 ))+
xlab('Relative prediction error in the RP means (%)')+ ylab('Relative prediction error in the RP variance (%)')+colorSet3+
facet_wrap(~Exp)+
theme_new+ theme(legend.position = 'top')+guides(size="none")+guides(alpha="none")
plt_rErrorScatter
knitr::opts_chunk$set(echo = TRUE)
library(rlist)
library(ez)
library(tidyverse)
library(latex2exp)
library(lsr)
library(rticles)
library(DescTools)
library(heplots)
library(lme4)
library(rstatix)
library(boot)
library(ggpubr)
library(reshape2)
source('mytheme.R')
# model version
modelversion = 'log_rstan'
rstanmodelPath = 'modelrlt'
modelPath = paste0(rstanmodelPath, '/models/', modelversion)
knitr::opts_chunk$set(echo = TRUE)
# Load the packages and include functions
source('rstan_linear.R') # final
library(rlist)
library(ez)
library(tidyverse)
library(latex2exp)
library(lsr)
library(rticles)
library(DescTools)
library(heplots)
library(lme4)
library(rstatix)
library(boot)
library(ggpubr)
library(reshape2)
sizeInModel <- c(1, 2, 3)
colorSet3 <- scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))
colorSet4 <- scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9", "#1a9641"))
colorSet <- scale_color_manual(values=c("#d7191c", "#fdae61", "#a6d96a", "#1a9641"))
options(mc.cores = parallel::detectCores()-1)
rstan_options (auto_write=TRUE)
rstanmodelPath = 'modelrlt'
modelPath = paste0(rstanmodelPath, '/models/', modelversion)
library(ggpubr)
#customize theme
theme_new <- theme_bw() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
strip.background = element_rect(color = "white",
fill = "white"),
panel.grid = element_blank())
## read data
dat = data.frame()
readCSV <- function(fn){
filename = paste0("../data/","Exp",toString(fn),".csv")
read.csv(filename) %>% mutate(Exp = fn)
}
dat <- map_df(1:4, readCSV)
dur <- sort(unique(dat$curDur))
AllExpData <- dat %>% filter(valid == 1)
AllExpData$Exp = paste0('Exp', AllExpData$Exp)
#plot WM correct rates
AllExpData$WMCrr <- AllExpData$TPresent == AllExpData$WMRP
wmPlotData <- dplyr::group_by(AllExpData, Exp, WMSize, NSub) %>%
dplyr::summarize(m_WMCrr = mean(WMCrr), n = n(), se_WMCrr = sd(WMCrr)/sqrt(n-1))
wmPlotData%>%dplyr::group_by(Exp, WMSize)%>%
dplyr::summarize( n = n(),
mean_WMCrr = mean(m_WMCrr), se_WMCrr = sd(m_WMCrr)/sqrt(n-1) ) -> meanForPlot
meanForPlot$WMSize <- factor(meanForPlot$WMSize, labels = c("low", "medium",  "high"))
WMCrr2 <- ggplot(meanForPlot, aes(WMSize, mean_WMCrr, ymin = mean_WMCrr - se_WMCrr, ymax = mean_WMCrr + se_WMCrr,
group =Exp, color = Exp, fill = Exp))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
coord_cartesian(ylim = c(0.5, 1)) +
colorSet4+
labs(x = "Memory load", y = "Mean correct rates of WM task") +
theme_new
WMCrr2
### generate WM correct rates
dat$WMCrr <- dat$TPresent == dat$WMRP
m_wmp<- dplyr::group_by(dat, Exp, WMSize, NSub) %>%
dplyr::summarize(m_WMCrr = mean(WMCrr), n =n(), se_WMCrr = sd(WMCrr)/sqrt(n-1))
### generate WM correct rates
dat$WMCrr <- dat$TPresent == dat$WMRP
m_wmp<- dplyr::group_by(dat, Exp, WMSize, NSub) %>%
dplyr::summarize(m_WMCrr = mean(WMCrr), n =n(), se_WMCrr = sd(WMCrr)/sqrt(n-1))
# function to run models on  lrz cluster parallely
runModelparallely<- function(AllExpData){
expList <- unique(AllExpData$Exp)
subList <- unique(AllExpData$NSub)
for (expName in expList) {
sub_exp_dat <- list()
data_exp <- AllExpData %>% dplyr::filter(Exp == expName)
data_exp$model <- expName
sub_exp <-  split(data_exp, data_exp$NSub) # split data for each subject
for (subNo in subList) {
sub_exp_dat <- list.append(sub_exp_dat, sub_exp[[subNo]])
}
rlt <- runModelcluster(sub_exp_dat)
saveRDS(rlt, file = paste0(getwd(), "/analysis/", modelPath, "/rlt/rlt_", expName,".rds"))
}
}
knitr::opts_chunk$set(echo = TRUE)
# Load the packages and include functions
source('rstan_linear.R') # final
library(rlist)
library(ez)
library(tidyverse)
library(latex2exp)
library(lsr)
library(rticles)
library(DescTools)
library(heplots)
library(lme4)
library(rstatix)
library(boot)
library(ggpubr)
library(reshape2)
sizeInModel <- c(1, 2, 3)
colorSet3 <- scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9"))
colorSet4 <- scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9", "#1a9641"))
colorSet <- scale_color_manual(values=c("#d7191c", "#fdae61", "#a6d96a", "#1a9641"))
options(mc.cores = parallel::detectCores()-1)
rstan_options (auto_write=TRUE)
rstanmodelPath = 'modelrlt'
modelPath = paste0(rstanmodelPath, '/models/', modelversion)
library(ggpubr)
#customize theme
theme_new <- theme_bw() +
theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
strip.background = element_rect(color = "white",
fill = "white"),
panel.grid = element_blank())
## read data
dat = data.frame()
readCSV <- function(fn){
filename = paste0("../data/","Exp",toString(fn),".csv")
read.csv(filename) %>% mutate(Exp = fn)
}
dat <- map_df(1:4, readCSV)
dur <- sort(unique(dat$curDur))
AllExpData <- dat %>% filter(valid == 1)
AllExpData$Exp = paste0('Exp', AllExpData$Exp)
#plot WM correct rates
AllExpData$WMCrr <- AllExpData$TPresent == AllExpData$WMRP
wmPlotData <- dplyr::group_by(AllExpData, Exp, WMSize, NSub) %>%
dplyr::summarize(m_WMCrr = mean(WMCrr), n = n(), se_WMCrr = sd(WMCrr)/sqrt(n-1))
wmPlotData%>%dplyr::group_by(Exp, WMSize)%>%
dplyr::summarize( n = n(),
mean_WMCrr = mean(m_WMCrr), se_WMCrr = sd(m_WMCrr)/sqrt(n-1) ) -> meanForPlot
meanForPlot$WMSize <- factor(meanForPlot$WMSize, labels = c("low", "medium",  "high"))
WMCrr2 <- ggplot(meanForPlot, aes(WMSize, mean_WMCrr, ymin = mean_WMCrr - se_WMCrr, ymax = mean_WMCrr + se_WMCrr,
group =Exp, color = Exp, fill = Exp))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
coord_cartesian(ylim = c(0.5, 1)) +
colorSet4+
labs(x = "Memory load", y = "Mean correct rates of WM task") +
theme_new
WMCrr2
### generate WM correct rates
dat$WMCrr <- dat$TPresent == dat$WMRP
m_wmp<- dplyr::group_by(dat, Exp, WMSize, NSub) %>%
dplyr::summarize(m_WMCrr = mean(WMCrr), n =n(), se_WMCrr = sd(WMCrr)/sqrt(n-1))
knitr::opts_chunk$set(echo = TRUE)
library(rlist)
library(ez)
library(tidyverse)
library(latex2exp)
library(lsr)
library(rticles)
library(DescTools)
library(heplots)
library(lme4)
library(rstatix)
library(boot)
library(ggpubr)
library(reshape2)
source('mytheme.R')
# model version
modelversion = 'log_rstan'
rstanmodelPath = 'modelrlt'
modelPath = paste0(rstanmodelPath, '/models/', modelversion)
#To preprocess the model result data, and merge different model version data together.
#function to merge the model result data
funMergeMRlt <- function(explist, path, version){
rltfilename <- {}
rltfilename <- c(rltfilename, paste0("rlt_", explist, ".rds"))
Bayparlist <- {}
AllDat_predY <- {}
AllDat_newY <- {}
modelResultAll <- list()
merge.data.all <- {}
merge.data <- readRDS(file.path(paste0( getwd(), "/", path, "/rlt/", rltfilename[1])))
for (i in 1:length(merge.data)){
modelResultAll <- list.append(modelResultAll, merge.data[[i]])
Bayparlist <- rbind(Bayparlist, merge.data[[i]]$Baypar)
AllDat_predY <- rbind(AllDat_predY, merge.data[[i]]$PredY_list)
AllDat_newY<- rbind(AllDat_newY, merge.data[[i]]$NewY_list)
}
if (length(rltfilename) >= 2) {
for (i in 2:length(rltfilename)){
new.data = readRDS(file.path(paste0(getwd(), "/", path, "/rlt/", rltfilename[i])))
for (j in 1:length(new.data)){
modelResultAll <- list.append(modelResultAll, new.data[[j]])
Bayparlist <- rbind(Bayparlist, new.data[[j]]$Baypar)
AllDat_predY <- rbind(AllDat_predY, new.data[[j]]$PredY_list)
AllDat_newY<- rbind(AllDat_newY, new.data[[j]]$NewY_list)
}
}
}
write.csv(Bayparlist, paste0(getwd(), "/", path, "/rlt/AllDat_Bayparlist_", modelversion, ".csv"))
write.csv(AllDat_predY, paste0( getwd(), "/",path, "/rlt/AllDat_predY_", modelversion, ".csv"))
write.csv(AllDat_newY, paste0(getwd(), "/",path, "/rlt/AllDat_newY_", modelversion, ".csv"))
}
funMergeMRlt(c('Exp1','Exp2','Exp3','Exp4') , modelPath, modelversion)
## read data
dat = data.frame()
readCSV <- function(fn){
filename = paste0("../data/","Exp",toString(fn),".csv")
read.csv(filename) %>% mutate(Exp = fn)
}
dat <- map_df(1:4, readCSV)
dur <- sort(unique(dat$curDur))
AllExpData <- dat %>% filter(valid == 1)
AllExpData$Exp = paste0('Exp.', AllExpData$Exp)
#plot WM correct rates
AllExpData$WMCrr <- AllExpData$TPresent == AllExpData$WMRP
wmPlotData <- dplyr::group_by(AllExpData, Exp, WMSize, NSub) %>%
dplyr::summarize(m_WMCrr = mean(WMCrr), n = n(), se_WMCrr = sd(WMCrr)/sqrt(n-1))
wmPlotData%>%dplyr::group_by(Exp, WMSize)%>%
dplyr::summarize( n = n(),
mean_WMCrr = mean(m_WMCrr), se_WMCrr = sd(m_WMCrr)/sqrt(n-1) ) -> meanForPlot
knitr::opts_chunk$set(echo = TRUE)
library(rlist)
library(ez)
library(tidyverse)
library(latex2exp)
library(lsr)
library(rticles)
library(DescTools)
library(heplots)
library(lme4)
library(rstatix)
library(boot)
library(ggpubr)
library(reshape2)
source('mytheme.R')
# model version
modelversion = 'log_rstan'
rstanmodelPath = 'modelrlt'
modelPath = paste0(rstanmodelPath, '/models/', modelversion)
#To preprocess the model result data, and merge different model version data together.
#function to merge the model result data
funMergeMRlt <- function(explist, path, version){
rltfilename <- {}
rltfilename <- c(rltfilename, paste0("rlt_", explist, ".rds"))
Bayparlist <- {}
AllDat_predY <- {}
AllDat_newY <- {}
modelResultAll <- list()
merge.data.all <- {}
merge.data <- readRDS(file.path(paste0( getwd(), "/", path, "/rlt/", rltfilename[1])))
for (i in 1:length(merge.data)){
modelResultAll <- list.append(modelResultAll, merge.data[[i]])
Bayparlist <- rbind(Bayparlist, merge.data[[i]]$Baypar)
AllDat_predY <- rbind(AllDat_predY, merge.data[[i]]$PredY_list)
AllDat_newY<- rbind(AllDat_newY, merge.data[[i]]$NewY_list)
}
if (length(rltfilename) >= 2) {
for (i in 2:length(rltfilename)){
new.data = readRDS(file.path(paste0(getwd(), "/", path, "/rlt/", rltfilename[i])))
for (j in 1:length(new.data)){
modelResultAll <- list.append(modelResultAll, new.data[[j]])
Bayparlist <- rbind(Bayparlist, new.data[[j]]$Baypar)
AllDat_predY <- rbind(AllDat_predY, new.data[[j]]$PredY_list)
AllDat_newY<- rbind(AllDat_newY, new.data[[j]]$NewY_list)
}
}
}
write.csv(Bayparlist, paste0(getwd(), "/", path, "/rlt/AllDat_Bayparlist_", modelversion, ".csv"))
write.csv(AllDat_predY, paste0( getwd(), "/",path, "/rlt/AllDat_predY_", modelversion, ".csv"))
write.csv(AllDat_newY, paste0(getwd(), "/",path, "/rlt/AllDat_newY_", modelversion, ".csv"))
}
funMergeMRlt(c('Exp1','Exp2','Exp3','Exp4') , modelPath, modelversion)
## read data
dat = data.frame()
readCSV <- function(fn){
filename = paste0("../data/","Exp",toString(fn),".csv")
read.csv(filename) %>% mutate(Exp = fn)
}
dat <- map_df(1:4, readCSV)
dur <- sort(unique(dat$curDur))
AllExpData <- dat %>% filter(valid == 1)
AllExpData$Exp = paste0('Exp.', AllExpData$Exp)
#plot WM correct rates
AllExpData$WMCrr <- AllExpData$TPresent == AllExpData$WMRP
wmPlotData <- dplyr::group_by(AllExpData, Exp, WMSize, NSub) %>%
dplyr::summarize(m_WMCrr = mean(WMCrr), n = n(), se_WMCrr = sd(WMCrr)/sqrt(n-1))
wmPlotData%>%dplyr::group_by(Exp, WMSize)%>%
dplyr::summarize( n = n(),
mean_WMCrr = mean(m_WMCrr), se_WMCrr = sd(m_WMCrr)/sqrt(n-1) ) -> meanForPlot
meanForPlot$WMSize <- factor(meanForPlot$WMSize, labels = c("low", "medium",  "high"))
WMCrr2 <- ggplot(meanForPlot, aes(WMSize, mean_WMCrr, ymin = mean_WMCrr - se_WMCrr, ymax = mean_WMCrr + se_WMCrr,
group =Exp, color = Exp, fill = Exp))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
coord_cartesian(ylim = c(0.5, 1)) +
colorSet4+
labs(x = "Memory load", y = "Mean accuracy in WM task") +
theme_new
WMCrr2
ggsave(paste0(getwd(), "/figures/WMCrr2.png"), WMCrr2, width = 5, height = 4)
meanForPlot$WMSize <- factor(meanForPlot$WMSize, labels = c("low", "medium",  "high"))
WMCrr2 <- ggplot(meanForPlot, aes(WMSize, mean_WMCrr, ymin = mean_WMCrr - se_WMCrr, ymax = mean_WMCrr + se_WMCrr,
group =Exp, color = Exp, fill = Exp))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
coord_cartesian(ylim = c(0.5, 1)) +
colorSet4+
labs(x = "Memory load", y = "Mean accuracy") +
theme_new
WMCrr2
ggsave(paste0(getwd(), "/figures/WMCrr2.png"), WMCrr2, width = 5, height = 4)
## read data
dat = data.frame()
readCSV <- function(fn){
filename = paste0("../data/","Exp",toString(fn),".csv")
read.csv(filename) %>% mutate(Exp = fn)
}
dat <- map_df(1:4, readCSV)
dur <- sort(unique(dat$curDur))
AllExpData <- dat %>% filter(valid == 1)
AllExpData$Exp = paste0('Exp. ', AllExpData$Exp)
#plot WM correct rates
AllExpData$WMCrr <- AllExpData$TPresent == AllExpData$WMRP
wmPlotData <- dplyr::group_by(AllExpData, Exp, WMSize, NSub) %>%
dplyr::summarize(m_WMCrr = mean(WMCrr), n = n(), se_WMCrr = sd(WMCrr)/sqrt(n-1))
wmPlotData%>%dplyr::group_by(Exp, WMSize)%>%
dplyr::summarize( n = n(),
mean_WMCrr = mean(m_WMCrr), se_WMCrr = sd(m_WMCrr)/sqrt(n-1) ) -> meanForPlot
meanForPlot$WMSize <- factor(meanForPlot$WMSize, labels = c("low", "medium",  "high"))
WMCrr2 <- ggplot(meanForPlot, aes(WMSize, mean_WMCrr, ymin = mean_WMCrr - se_WMCrr, ymax = mean_WMCrr + se_WMCrr,
group =Exp, color = Exp, fill = Exp))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
coord_cartesian(ylim = c(0.5, 1)) +
colorSet4+
labs(x = "Memory load", y = "Mean accuracy") +
theme_new
WMCrr2
ggsave(paste0(getwd(), "/figures/WMCrr2.png"), WMCrr2, width = 5, height = 4)
