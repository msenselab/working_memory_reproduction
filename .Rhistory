predVar_err = mean(m_sig_r-sd_repDur),
predRP_rerr = mean(abs(m_mu_r-m_repDur)/m_repDur),
predVar_rerr = mean(abs(m_sig_r-sd_repDur)/sd_repDur),
predcv_err = pred_cv-cv,
predcv_rerr = mean(abs(pred_cv-cv)/cv))
mpredY_sub_split <-split(mpredY_sub %>%select(c('Exp', 'NSub', 'WMSize', 'm_repDur', 'curDur')), mpredY_sub$curDur)
mpredY_sub_cv_split <-split(mpredY_sub %>%select(c('Exp', 'NSub', 'WMSize', 'cv', 'curDur')), mpredY_sub$curDur)
mpredY_sub_split1 <-split(mpredY_sub %>%select(c('Exp', 'NSub', 'WMSize', 'curDur' ,'m_repDur')), mpredY_sub$WMSize)
mpredY_sub_cv_split1 <-split(mpredY_sub %>%select(c('Exp', 'NSub', 'WMSize','curDur', 'cv')), mpredY_sub$WMSize)
mpredY_sub_jasp_RP = NULL
mpredY_sub_jasp_cv = NULL
mpredY_sub_jasp_RP1 = NULL
mpredY_sub_jasp_cv1 = NULL
for(i in 1: length(mpredY_sub_split)){
temp = mpredY_sub_split[[i]]
curDur = unique(temp$curDur)
temp$curDur = NULL
colnames(temp) = c('Exp', 'NSub', 'WMSize', paste0('m_repDur_', curDur))
temp_cv = mpredY_sub_cv_split[[i]]
curDur = unique(temp_cv$curDur)
temp_cv$curDur = NULL
colnames(temp_cv) = c('Exp', 'NSub', 'WMSize', paste0('cv_', curDur))
if(i == 1){
mpredY_sub_jasp_RP = temp
mpredY_sub_jasp_cv = temp_cv
}
else{
mpredY_sub_jasp_RP = left_join(mpredY_sub_jasp_RP, temp, by=c("Exp",  "NSub", "WMSize"))
mpredY_sub_jasp_cv = left_join(mpredY_sub_jasp_cv, temp_cv, by=c("Exp",  "NSub", "WMSize"))
}
}
for (i in 1: length(mpredY_sub_split1)){
temp1 = mpredY_sub_split1[[i]]
WMSize = unique(temp1$WMSize)
temp1$WMSize = NULL
colnames(temp1) = c('Exp', 'NSub', 'curDur', paste0('m_repDur_', WMSize))
temp_cv1 = mpredY_sub_cv_split1[[i]]
WMSize = unique(temp_cv1$WMSize)
temp_cv1$WMSize = NULL
colnames(temp_cv1) = c('Exp', 'NSub', 'curDur', paste0('cv_', WMSize))
if(i == 1){
mpredY_sub_jasp_RP1 = temp1
mpredY_sub_jasp_cv1 = temp_cv1
}
else{
mpredY_sub_jasp_RP1 = left_join(mpredY_sub_jasp_RP1, temp1, by=c("Exp",  "NSub", "curDur"))
mpredY_sub_jasp_cv1 = left_join(mpredY_sub_jasp_cv1, temp_cv1, by=c("Exp",  "NSub", "curDur"))
}
}
mpredY_sub$RP_bias = mpredY_sub$m_repDur -mpredY_sub$curDur
mpredY_sub_new <- dplyr::group_by(mpredY_sub, curDur, Exp, NSub) %>%
dplyr::summarize(m_RP_bias = mean(RP_bias))%>% spread(curDur, m_RP_bias)
mpredY_sub_WMsize <- dplyr::group_by(mpredY_sub, WMSize, Exp, NSub) %>%
dplyr::summarize(m_RP_bias = mean(RP_bias))%>% spread(WMSize, m_RP_bias)
#### predicted data
m_predY <- mpredY_sub%>%
dplyr::group_by(Exp, curDur, WMSize) %>%
dplyr::summarize(m_m_repDur = mean(m_repDur),
m_sd_repDur = mean(sd_repDur),
m_m_sig_r =mean(m_sig_r),
m_m_mu_r = mean(m_mu_r),
m_m_wp = mean(m_wp),
n = n(),
m_se_wp = sd(se_wp)/sqrt(n-1),
log_lik =mean(log_lik),
mpredRP_err = mean(predRP_err),
mpredVar_err = mean(predVar_err),
mpredRP_rerr = mean(predRP_rerr),
mpredVar_rerr = mean(predVar_rerr),
cv= mean(cv),
pred_cv = mean(pred_cv),
mpredcv_err = mean(predcv_err),
mpredcv_rerr = mean(predcv_rerr))
m_predY_acc =  mpredY_sub%>%
dplyr::group_by(Exp) %>%
dplyr::summarize(mpred_rerr = mean(predRP_rerr)*100,
mpredVar_rerr = mean(predVar_rerr)*100,
mpredcv_rerr = mean(predcv_rerr)*100)
m_predY_acc
#extract waic and loo-cv from parameter list
m_WAIC <- dplyr::group_by(Bayparlist, Exp) %>%
dplyr::summarize(n =n(),
m_looic = mean(looic),
m_waic = mean(waic),
se_waic = sd(waic)/sqrt(n-1),
se_looic = sd(looic)/sqrt(n-1),
m_p_loo = mean(p_loo),
m_elpd_loo = mean(elpd_loo),
m_se_looic = mean(se_looic),
m_se_p_loo = mean(se_p_loo),
m_p_waic = mean(p_waic),
m_se_waic = mean(se_waic))
m_WAIC
#load test results
AllDat_newY <- read.csv(paste0(modelPath, "/rlt/AllDat_newY_",modelversion,".csv"))
AllDat_newY$WMSize <- as.factor(AllDat_newY$WMSize)
levels(AllDat_newY$WMSize) = c("low", "medium",  "high")
m_newY <- dplyr::group_by(AllDat_newY, Exp, curDur, WMSize) %>%
dplyr::summarize(m_mu_r = mean(mu_r),
m_sig_r = mean(sig_r),
log_lik =mean(log_lik)
)
RP  <- ggplot(data = m_predY, aes(x = curDur, y = m_m_repDur,  color=WMSize, shape = as.factor('Observation'))) +
geom_point(size=2, alpha = 0.5)+
geom_line(data= m_newY, aes(x=curDur, y=m_mu_r, color=WMSize)) +
#geom_point(data = m_predY, aes(x = curDur, y = m_m_predY, color=WMSize, group = WMSize, shape = as.factor('Prediction')),alpha = 0.5)+
geom_abline(slope=1, intercept=0)+
facet_grid(cols = vars(Exp)) +
labs(x="Sample intervals (s)", y="Reproduction (s)", shape=" ", color = "Memory Load")+
theme_new+colorSet3+guides(shape="none")
RP
# calculate the slope of the cv curve
RPslope_model <- function(df) {
lm(m_repDur ~ log(curDur), data = df)
}
RPslopes <- mpredY_sub %>%
dplyr::group_by(NSub, Exp, WMSize) %>% nest() %>%
mutate(model = map(data, RPslope_model)) %>%
mutate(slope = map(model, broom::tidy)) %>%  # get estimates
unnest(slope, .drop = TRUE) %>% # remove raw data
select(-std.error,-statistic, -p.value) %>%  # remove unnessary columns
spread(term, estimate) %>%   # spread stimates
dplyr::rename(Intercept = `(Intercept)`, slope = `log(curDur)`)
RPslopes$data <- NULL
RPslopes$model <- NULL
mRPslopes <- RPslopes%>% dplyr::group_by(WMSize, Exp) %>%
dplyr::summarize(m_Intercept = mean(Intercept),
m_slope = mean(slope),
n = n(),
se_slope = sd(slope)/sqrt(n-1),
se_Intercept = sd(Intercept)/sqrt(n-1))
plt_CVslope <- ggplot(mRPslopes, aes(Exp, m_slope, ymin = m_slope - se_slope, ymax = m_slope + se_slope, group =interaction(Exp, WMSize), color = factor(WMSize)), shape = factor(WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
colorSet4+
labs(x = "", y = TeX("Slope of RP"), color = 'Memory Load') +
theme_new +theme(legend.position="top")
plt_CVslope
RPslopes$WMSize = as.factor(RPslopes$WMSize)
ezANOVA(data = RPslopes, dv= slope, wid=NSub, within=.(WMSize), between = .(Exp))
ezANOVA(data = RPslopes %>% filter(Exp =='Exp1'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = RPslopes %>% filter(Exp =='Exp2'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = RPslopes %>% filter(Exp =='Exp3'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = RPslopes %>% filter(Exp =='Exp4'), dv= slope, wid=NSub, within = .(WMSize))
ezANOVA(data = RPslopes, dv= Intercept, wid=NSub, within=.(WMSize), between = .(Exp))
RP_bias  <- ggplot(data = m_predY, aes(x = curDur, y = m_m_mu_r - curDur,color=WMSize, shape = as.factor('Observation'))) +
geom_point(size=2, alpha = 0.5)+
geom_line(data= m_newY, aes(x=curDur, y=m_mu_r-curDur, color=WMSize)) +
geom_hline(yintercept = 0, linetype='dashed')+
facet_grid(cols = vars(Exp)) +
labs(x=" ", y="Reproduction bias (s)", shape=" ", color = "Memory Load")+theme_new+
colorSet3+guides(shape="none")
RP_bias
curDurItem <- unique(m_predY$curDur)
RP_CV <- ggplot(data= m_predY, aes(x=curDur, y= cv, color=WMSize, shape = as.factor('Observation'))) +
geom_point(size=2, alpha = 0.5)+
geom_line(data = m_newY, aes(x=curDur, y= m_sig_r/m_mu_r, color=WMSize)) +
facet_grid(~Exp) +
labs(x="Duration (s)", y="CV", shape=" ", color = "Memory Load")+ theme_new+
colorSet3+guides(shape="none")+theme(strip.text.x = element_blank())
RP_CV
# calculate the slope of the cv curve
cvSlope_model <- function(df) {
lm(log(cv_obs) ~ log(curDur), data = df)
}
mpredY <- dplyr::group_by(AllDat_predY, curDur, WMSize, Exp, NSub) %>%
dplyr::summarize(m_repDur = mean(repDur),
sd_repDur = sd(repDur),
n = n(),
sd_repDur = sd(repDur),
m_mu_r = mean(mu_r),
m_sig_r = mean(sig_r),
wp = mean(wp),
log_lik =mean(log_lik))
mpredY$cv_obs <- mpredY$sd_repDur/mpredY$m_repDur
CVslopes <- mpredY %>%
dplyr::group_by(NSub, Exp, WMSize) %>% nest()  %>%  # nested data
mutate(model = map(data, cvSlope_model)) %>%  # linear regression
mutate(slope = map(model, broom::tidy)) %>%  # get estimates
unnest(slope, .drop = TRUE) %>% # remove raw data
select(-std.error,-statistic, -p.value) %>%  # remove unnessary columns
spread(term, estimate) %>%   # spread stimates
dplyr::rename(obs_cv_Intercept = `(Intercept)`, obs_cv_slope = `log(curDur)`)  # rename columns
CVslopes$data = NULL
CVslopes$model = NULL
#change the table struction of slopes for spss
CVslopes_list <-split(CVslopes, CVslopes$WMSize)
CVslopes_spss = NULL
for (i in 1: length(CVslopes_list)){
temp = CVslopes_list[[i]]
WMSize = unique(temp$WMSize)
temp$WMSize = NULL
colnames(temp) = c('Exp',  'NSub', paste0('obs_cv_Intercept_',WMSize), paste0('obs_cv_slope_',WMSize))
if(i == 1)
CVslopes_spss = temp
else
CVslopes_spss = left_join(CVslopes_spss, temp, by=c("Exp",  "NSub"))
}
mCVslopes <- CVslopes%>% dplyr::group_by(WMSize, Exp) %>%
dplyr::summarize(n =n(),
m_obs_cv_Intercept = mean(obs_cv_Intercept),
m_obs_cv_slope = mean(obs_cv_slope),
se_obs_CV_slope = sd(obs_cv_slope)/sqrt(n-1),
se_obs_CV_Intercept = sd(obs_cv_Intercept)/sqrt(n-1))
plt_CVslope <- ggplot(mCVslopes, aes(Exp, m_obs_cv_slope, ymin = m_obs_cv_slope - se_obs_CV_slope, ymax = m_obs_cv_slope + se_obs_CV_slope, group =interaction(Exp, WMSize), color = factor(WMSize)), shape = factor(WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
colorSet4+
labs(x = "", y = TeX("Slope of CV"), color = 'Memory Load') +
theme_new +theme(legend.position="top")
plt_CVslope
plt_CVIntecept<- ggplot(mCVslopes, aes(Exp, m_obs_cv_Intercept, ymin = m_obs_cv_Intercept - se_obs_CV_Intercept, ymax = m_obs_cv_Intercept + se_obs_CV_Intercept, group =interaction(Exp, WMSize), color = factor(WMSize)), shape = factor(WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
colorSet4+
labs(x = "", y = TeX("Intercept of CV"), color = 'Memory Load') +
theme_new +theme(legend.position="top")
plt_CVIntecept
## Figures in the MS
fig_CV_slope_Intecept<-ggarrange(plt_CVslope, plt_CVIntecept, common.legend = TRUE, ncol=2, nrow=1,  labels = c("a", "b"))
#ggsave(paste0(getwd(), "/", modelPath, "/figures/fig_CV_slope_Intecept.png"), fig_CV_slope_Intecept, width = 8, height = 4)
fig_CV_slope_Intecept
## Figures in the MS
fig3<-ggarrange(RP_bias, RP_CV, common.legend = TRUE, ncol=1, nrow=2,  labels = c("a", "b"))
ggsave(paste0(getwd(), "/", modelPath, "/figures/fig3.png"), fig3, width = 6, height = 5)
fig3
AllDat_newY$predErr = AllDat_newY$mu_r - AllDat_newY$curDur
temp_newY <- AllDat_newY %>% filter(curDur > 0.8, curDur < 1.1) %>% select(Exp, WMSize, NSub, predErr, curDur)
InP_curve<- temp_newY%>% dplyr::group_by(Exp, WMSize, NSub)%>%
dplyr::summarise(minErr = min(abs(predErr)), idx = which.min(abs(predErr)))
InP_curve$InP_curve = temp_newY[InP_curve$idx,]$curDur
InP_curve
Bayparlist$wp_1 = (Bayparlist$sig_s2 + Bayparlist$ls *1 )/ (Bayparlist$sig_s2 + Bayparlist$ls *1 + Bayparlist$sig_pr2_log)
Bayparlist$wp_3 = (Bayparlist$sig_s2 + Bayparlist$ls *2) / (Bayparlist$sig_s2 + Bayparlist$ls *2 + Bayparlist$sig_pr2_log)
Bayparlist$wp_5 = (Bayparlist$sig_s2 + Bayparlist$ls *3) / (Bayparlist$sig_s2 + Bayparlist$ls *3 + Bayparlist$sig_pr2_log)
size = 1
Bayparlist$InP_1 = exp((Bayparlist$kr*size + (1-Bayparlist$wp_1)*Bayparlist$ks*size + Bayparlist$wp_1* Bayparlist$mu_pr_log)/Bayparlist$wp_1)
size = 2
Bayparlist$InP_3 = exp((Bayparlist$kr*size + (1-Bayparlist$wp_3)*Bayparlist$ks*size + Bayparlist$wp_3* Bayparlist$mu_pr_log)/Bayparlist$wp_3)
size = 3
Bayparlist$InP_5 = exp((Bayparlist$kr*size + (1-Bayparlist$wp_5)*Bayparlist$ks*size + Bayparlist$wp_5* Bayparlist$mu_pr_log)/Bayparlist$wp_5)
Bayparlist$sig2_post_1 = (Bayparlist$sig_pr2_log *(Bayparlist$sig_s2 +Bayparlist$ls*1))/(Bayparlist$sig_pr2_log + Bayparlist$sig_s2 +Bayparlist$ls*1) *0.5
Bayparlist$sig2_post_3 =(Bayparlist$sig_pr2_log *(Bayparlist$sig_s2 +Bayparlist$ls*3))/(Bayparlist$sig_pr2_log + Bayparlist$sig_s2 +Bayparlist$ls*3) *0.5
Bayparlist$sig2_post_5 = (Bayparlist$sig_pr2_log *(Bayparlist$sig_s2 +Bayparlist$ls*5))/(Bayparlist$sig_pr2_log + Bayparlist$sig_s2 +Bayparlist$ls*5) *0.5
Bayparlist%>%filter(Exp == 'Exp2')%>%select("NSub", "Exp", "sig2_post_1", "sig2_post_3","sig2_post_5")
Bayparlist$InP_old_1 = exp((Bayparlist$kr*size - (1-Bayparlist$wp_1)*Bayparlist$ks*size +(Bayparlist$sig_pr2_log *(Bayparlist$sig_s2 +Bayparlist$ls*1))/(Bayparlist$sig_pr2_log + Bayparlist$sig_s2 +Bayparlist$ls*1) *0.5 + Bayparlist$wp_1* Bayparlist$mu_pr_log)/Bayparlist$wp_1)
Bayparlist$InP_old_3 = exp((Bayparlist$kr*size - (1-Bayparlist$wp_3)*Bayparlist$ks*size +(Bayparlist$sig_pr2_log *(Bayparlist$sig_s2 +Bayparlist$ls*3))/(Bayparlist$sig_pr2_log + Bayparlist$sig_s2 +Bayparlist$ls*3) *0.5 + Bayparlist$wp_3* Bayparlist$mu_pr_log)/Bayparlist$wp_3)
Bayparlist$InP_old_5 = exp((Bayparlist$kr*size - (1-Bayparlist$wp_5)*Bayparlist$ks*size +(Bayparlist$sig_pr2_log *(Bayparlist$sig_s2 +Bayparlist$ls*5))/(Bayparlist$sig_pr2_log + Bayparlist$sig_s2 +Bayparlist$ls*5) *0.5 + Bayparlist$wp_5* Bayparlist$mu_pr_log)/Bayparlist$wp_5)
Bayparlist%>%select(NSub, Exp, wp_1, wp_3, wp_5, InP_1, InP_3, InP_5, InP_old_1, InP_old_3, InP_old_5)%>%
unite(newcol1,  wp_1, InP_1, InP_old_1)%>%
unite(newcol3,  wp_3, InP_3, InP_old_3)%>%
unite(newcol5, wp_5, InP_5, InP_old_5)%>%
melt(id.vars = c("NSub", "Exp")) %>%
dplyr::rename(
WMSize = variable,
newcol = value
)%>%
separate(newcol,  c("wp", "InP_Eq", "InP_Eq_old"), sep = "_") -> Baypar_WMSize
Baypar_WMSize$WMSize <- substr(Baypar_WMSize$WMSize, 7, 7)
Baypar_WMSize$WMSize <- as.factor(Baypar_WMSize$WMSize)
Baypar_WMSize$InP_Eq = as.numeric(Baypar_WMSize$InP_Eq)
Baypar_WMSize$InP_Eq_old = as.numeric(Baypar_WMSize$InP_Eq_old)
levels(Baypar_WMSize$WMSize) = c("low", "medium",  "high")
##save csv for SPSS
left_join(Baypar_WMSize, InP_curve%>%select("Exp", "WMSize","NSub", "InP_curve"),  by = c("Exp","WMSize","NSub")) -> Baypar_WMSize
Baypar_WMSize_melt <- melt(Baypar_WMSize%>%select("Exp","WMSize","NSub", "InP_Eq", "InP_Eq_old", "InP_curve"), id.vars = c("Exp","WMSize","NSub"),
variable.name = "Type",
value.name = "InP" )
Baypar_WMSize_melt %>%filter(Type== "InP_curve") %>% dplyr::group_by(Exp)%>%
dplyr::summarise(n = n(),
m_InP = mean(InP), se_InP= sd(InP)/sqrt(n-1))
Baypar_WMSize_melt$Exp = as.factor(Baypar_WMSize_melt$Exp)
Baypar_WMSize_melt%>% dplyr::group_by(Exp, WMSize, Type)%>%
dplyr::summarise(n = n(),
m_InP = mean(InP), se_InP= sd(InP)/sqrt(n-1))-> mBaypar_InP
#plot InP_curve(the intersections of the Prediction curve with the diagonal)
plt_InP<- ggplot(data = mBaypar_InP%>%filter(Type== "InP_curve"), aes(x= Exp, y=m_InP, color = WMSize, shape = Type))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  aes(ymin = m_InP - se_InP, ymax = m_InP + se_InP), position = position_dodge(width = 0.2)) +theme_new+
labs(colour = "Memory Load")+colorSet3+
xlab(' ')+ylab("Indifferent point (s)")+guides(shape="none")+
theme(legend.position = "top")
plt_InP
ezANOVA(data = Baypar_WMSize, dv= InP_curve, wid=NSub, within = .(WMSize), between = .(Exp))
pairwise.t.test(Baypar_WMSize$InP_curve, Baypar_WMSize$Exp)
ezANOVA(data = Baypar_WMSize %>% filter(Exp =='Exp2'), dv= InP_curve, wid=NSub, within = .(WMSize))
ezANOVA(data = Baypar_WMSize %>% filter(Exp =='Exp3'), dv= InP_curve, wid=NSub, within = .(WMSize))
ezANOVA(data = Baypar_WMSize %>% filter(Exp =='Exp4'), dv= InP_curve, wid=NSub, within = .(WMSize))
### change the table struction for spss
Bayparlist_list <-split(Baypar_WMSize %>% select(c("NSub","Exp","WMSize", "wp","InP_curve")), Baypar_WMSize$WMSize)
Bayparlist_spss = NULL
for (i in 1: length(Bayparlist_list)){
temp = Bayparlist_list[[i]]
WMSize = unique(temp$WMSize)
temp$WMSize = NULL
colnames(temp) = c('NSub','Exp', paste0('wp_',WMSize), paste0('InP_curve_',WMSize))
if(i == 1)
Bayparlist_spss = temp
else
Bayparlist_spss = left_join(Bayparlist_spss, temp, by=c("Exp",  "NSub"))
}
mpredY_sub$RP_Bias = mpredY_sub$m_repDur-mpredY_sub$curDur
RP_bias_Anova <- ezANOVA(data = mpredY_sub, dv= RP_Bias, wid=NSub, within= .(curDur, WMSize), between = .(Exp), detailed = TRUE, return_aov = FALSE )
RP_bias_Anova
# main effect of Duration  F(1.177, 3.532) = 377.965, p < .001, ηp² = .863.
(RP_bias_Anova$ANOVA)$DFn[3] *(RP_bias_Anova$`Sphericity Corrections`)$GGe[1]
(RP_bias_Anova$ANOVA)$DFd[3] *(RP_bias_Anova$`Sphericity Corrections`)$GGe[1]
#Duration × Experiment,  F(12, 240) = 2.506, p = .004, ηp² = .111
(RP_bias_Anova$ANOVA)$DFn[5] *(RP_bias_Anova$`Sphericity Corrections`)$GGe[2]
(RP_bias_Anova$ANOVA)$DFd[5] *(RP_bias_Anova$`Sphericity Corrections`)$GGe[2]
mpredY_sub <- ungroup(mpredY_sub)
res.aov <-  rstatix::anova_test(data = mpredY_sub, dv = RP_Bias, wid = NSub, within = c(curDur, WMSize), between = Exp)
get_anova_table(res.aov, correction = "GG")
ezANOVA(data = Bayparlist, dv= sig_pr2_log, wid=NSub, between = .(Exp))
ezANOVA(data = Bayparlist, dv= sig_mn2, wid=NSub, between = .(Exp))
ezANOVA(data = Bayparlist, dv= ks, wid=NSub, between = .(Exp))
ezANOVA(data = Bayparlist, dv= mu_pr, wid=NSub, between = .(Exp))
Baypar_WMSize$wp = as.numeric(Baypar_WMSize$wp)
mwp <- Baypar_WMSize%>%dplyr::group_by(Exp, WMSize)%>% dplyr::summarise(m_wp = mean(wp), n= n(), se_wp = sd(wp)/sqrt(n-1))
plt_wp <- ggplot(mwp, aes(Exp, m_wp, ymin = m_wp - se_wp, ymax = m_wp + se_wp, group =interaction(Exp, WMSize), color = factor(WMSize)), shape = factor(WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
#coord_cartesian(ylim = c(0.5, 1)) +
colorSet4+
labs(x = "", y = TeX("Weight of the prior $w_p$"), color = 'Memory Load') +
theme_new + theme(legend.position="top")
plt_wp
fig4<-ggarrange(plt_wp, plt_InP, common.legend = TRUE, ncol=2, nrow=1,  labels = c("a", "b"))
#ggsave(paste0(getwd(), "/", modelPath, "/figures/fig4.png"), fig4, width = 6, height = 3)
fig4
ezANOVA(data = Baypar_WMSize, dv= wp, wid=NSub, within=.(WMSize), between = .(Exp))
ezANOVA(data = Baypar_WMSize%>%filter(Exp =='Exp2'), dv= wp, wid=NSub, within= .(WMSize) )
ezANOVA(data = Baypar_WMSize%>%filter(Exp =='Exp4'), dv= wp, wid=NSub, within= .(WMSize) )
### pairwise.t.test on wp
pairwise.t.test(Baypar_WMSize$wp, Baypar_WMSize$Exp)
##independent T test
t.test((Baypar_WMSize%>%filter(Exp %in%c('Exp1')))$wp)
t.test((Baypar_WMSize%>%filter(Exp %in%c('Exp2')))$wp)
t.test((Baypar_WMSize%>%filter(Exp %in%c('Exp3')))$wp)
t.test((Baypar_WMSize%>%filter(Exp %in%c('Exp4')))$wp)
## One way ANOVA  on standard variance of Ds $\sigma_{s}$
ezANOVA(data = Bayparlist, dv= sig_s2, wid=NSub, between = .(Exp))
### pairwise.t.test on standard variance of $D_s$
pairwise.t.test(Bayparlist$sig_s2, Bayparlist$Exp)
##independent T test
t.test((Bayparlist%>%filter(Exp %in%c('Exp1')))$sig_s2)
t.test((Bayparlist%>%filter(Exp %in%c('Exp2')))$sig_s2)
t.test((Bayparlist%>%filter(Exp %in%c('Exp3')))$sig_s2)
t.test((Bayparlist%>%filter(Exp %in%c('Exp4')))$sig_s2)
##  anova analyse on observed cv slope
ezANOVA(data = CVslopes, dv= obs_cv_slope, wid=NSub, between = .(Exp))
m_predErr_sub<- mpredY_sub%>%
dplyr::group_by(Exp, WMSize, NSub) %>% dplyr::summarise(
mpredRP_err=mean(predRP_err),
mpredVar_err=mean(predVar_err),
mpredcv_err = mean(predcv_err),
mpredRP_rerr = mean(predRP_rerr),
mpredVar_rerr = mean(predVar_rerr),
mpredcv_rerr = mean(predcv_rerr))
m_predErr<- m_predY%>%
dplyr::group_by(Exp, WMSize) %>% dplyr::summarise(
mmpredcv_err = mean(mpredcv_err),
mmpredRP_err=mean(mpredRP_err),
mmpredVar_err=mean(mpredVar_err),
mmpredRP_rerr = mean(mpredRP_rerr),
mmpredVar_rerr = mean(mpredVar_rerr),
mmpredcv_rerr = mean(mpredcv_rerr))
m_predErr
m_predErr_sub$model = 'logarithmic'
m_predErr$model = 'logarithmic'
linear_model = 'linear'
m_predErr_linear = read.csv(paste0(getwd(), "/", rstanmodelPath, '/models/', linear_model, "/rlt/m_predErr_", linear_model, ".csv"))
paste0(getwd(), "/", rstanmodelPath, '/models/', linear_model, "/rlt/m_predErr_", linear_model, ".csv")
linear_model
m_predErr_sub$model = 'logarithmic'
m_predErr$model = 'logarithmic'
linear_model_path = 'linear_rstan'
linear_model = 'linear'
m_predErr_linear = read.csv(paste0(getwd(), "/", rstanmodelPath, '/models/', linear_model_path, "/rlt/m_predErr_", linear_model, ".csv"))
knitr::opts_chunk$set(echo = TRUE)
# Load the packages and include functions
source('rstan_linear.R') # final
library(rlist)
library(ez)
library(tidyverse)
library(latex2exp)
library(lsr)
library(rticles)
library(DescTools)
library(heplots)
library(lme4)
library(rstatix)
library(boot)
library(ggpubr)
library(reshape2)
sizeInModel <- c(1, 2, 3)
source('mytheme.R')
options(mc.cores = parallel::detectCores()-1)
rstan_options (auto_write=TRUE)
rstanmodelPath = 'modelrlt'
modelPath = paste0(rstanmodelPath, '/models/', modelversion)
library(ggpubr)
# ## read data
# dat = data.frame()
# readCSV <- function(fn){
#   filename = paste0("../data/","Exp",toString(fn),".csv")
#   read.csv(filename) %>% mutate(Exp = fn)
# }
#
# dat <- map_df(1:4, readCSV)
# dur <- sort(unique(dat$curDur))
# AllExpData <- dat %>% filter(valid == 1)
# AllExpData$Exp = paste0('Exp', AllExpData$Exp)
AllExpData = read.csv("../data/AllValidData.csv")
dur <- sort(unique(AllExpData$curDur))
AllExpData[which(AllExpData$Exp == 'Exp4'),"Exp"] = "Exp4a"
AllExpData[which(AllExpData$Exp == 'Exp5'),"Exp"] = "Exp4b"
# function to run models on  lrz cluster parallely
runModelparallely<- function(AllExpData){
expList <- unique(AllExpData$Exp)
subList <- unique(AllExpData$NSub)
for (expName in expList) {
sub_exp_dat <- list()
data_exp <- AllExpData %>% dplyr::filter(Exp == expName)
data_exp$model <- expName
sub_exp <-  split(data_exp, data_exp$NSub) # split data for each subject
for (subNo in subList) {
sub_exp_dat <- list.append(sub_exp_dat, sub_exp[[subNo]])
}
rlt <- runModelcluster(sub_exp_dat)
saveRDS(rlt, file = paste0(getwd(), "/analysis/", modelPath, "/rlt/rlt_", expName,".rds"))
}
}
# function to run models on local computer
runModelonlocal<- function(AllExpData){
expList <- unique(AllExpData$Exp)
subList <- unique(AllExpData$NSub)
for (expName in expList) {
rlt <-list()
data_exp <- AllExpData %>% dplyr::filter(Exp == expName)
data_exp$model <- expName
sub_exp <-  split(data_exp, data_exp$NSub) # split data for each subject
for (subNo in subList) {
rlt <- list.append(rlt, funFitStan(sub_exp[[subNo]]))
}
saveRDS(rlt, file = paste0(getwd(), "/analysis/", modelPath, "/rlt/rlt_", expName,".rds"))
}
}
#To preprocess the model result data, and merge different model version data together.
#function to merge the model result data
funMergeMRlt <- function(explist, path, version){
rltfilename <- {}
rltfilename <- c(rltfilename, paste0("rlt_", explist, ".rds"))
AllDat_Bayparlist <- {}
AllDat_predY <- {}
AllDat_newY <- {}
modelResultAll <- list()
merge.data.all <- {}
merge.data <- readRDS(file.path(paste0( getwd(), "/", path, "/rlt/", rltfilename[1])))
for (i in 1:length(merge.data)){
modelResultAll <- list.append(modelResultAll, merge.data[[i]])
AllDat_Bayparlist <- rbind(AllDat_Bayparlist, merge.data[[i]]$Baypar)
AllDat_predY <- rbind(AllDat_predY, merge.data[[i]]$PredY_list)
AllDat_newY<- rbind(AllDat_newY, merge.data[[i]]$NewY_list)
}
if (length(rltfilename) >= 2) {
for (i in 2:length(rltfilename)){
new.data = readRDS(file.path(paste0(getwd(), "/", path, "/rlt/", rltfilename[i])))
for (j in 1:length(new.data)){
modelResultAll <- list.append(modelResultAll, new.data[[j]])
AllDat_Bayparlist <- rbind(AllDat_Bayparlist, new.data[[j]]$Baypar)
AllDat_predY <- rbind(AllDat_predY, new.data[[j]]$PredY_list)
AllDat_newY<- rbind(AllDat_newY, new.data[[j]]$NewY_list)
}
}
}
write.csv(AllDat_Bayparlist, paste0(getwd(), "/", path, "/rlt/AllDat_Bayparlist_", modelversion, ".csv"))
write.csv(AllDat_predY, paste0( getwd(), "/",path, "/rlt/AllDat_predY_", modelversion, ".csv"))
write.csv(AllDat_newY, paste0(getwd(), "/",path, "/rlt/AllDat_newY_", modelversion, ".csv"))
saveRDS(modelResultAll, file = paste0(getwd(), "/", path, "/rlt/modelResultAll_", modelversion, ".rds"))
}
needmerge = 1
models_to_merge <- c('Exp1','Exp2','Exp3','Exp4','Exp5')
if (needmerge == 1){
funMergeMRlt(models_to_merge, modelPath, modelversion)
}
models_to_merge
modelPath
knitr::opts_chunk$set(echo = TRUE)
library(rlist)
library(ez)
library(tidyverse)
library(latex2exp)
library(lsr)
library(rticles)
library(DescTools)
library(heplots)
library(lme4)
library(rstatix)
library(boot)
library(ggpubr)
library(reshape2)
source('mytheme.R')
# model version
modelversion = 'log_rstan'
rstanmodelPath = 'modelrlt'
modelPath = paste0(rstanmodelPath, '/models/', modelversion)
