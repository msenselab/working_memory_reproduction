knitr::opts_chunk$set(echo = TRUE)
library(rlist)
library(ez)
library(tidyverse)
library(latex2exp)
library(lsr)
library(rticles)
library(DescTools)
library(heplots)
library(lme4)
library(rstatix)
library(boot)
library(ggpubr)
library(reshape2)
source('mytheme.R')
# model version
modelversion = 'gap_log_rstan'
rstanmodelPath = 'modelrlt'
modelPath = paste0(rstanmodelPath, '/models/', modelversion)
#To preprocess the model result data, and merge different model version data together.
#function to merge the model result data
funMergeMRlt <- function(explist, path, version){
rltfilename <- {}
rltfilename <- c(rltfilename, paste0("rlt_", explist, ".rds"))
Bayparlist <- {}
AllDat_predY <- {}
AllDat_newY <- {}
modelResultAll <- list()
merge.data.all <- {}
merge.data <- readRDS(file.path(paste0(getwd(), "/", path, "/rlt/", rltfilename[1])))
for (i in 1:length(merge.data)){
modelResultAll <- list.append(modelResultAll, merge.data[[i]])
Bayparlist <- rbind(Bayparlist, merge.data[[i]]$Baypar)
AllDat_predY <- rbind(AllDat_predY, merge.data[[i]]$PredY_list)
AllDat_newY<- rbind(AllDat_newY, merge.data[[i]]$NewY_list)
}
if (length(rltfilename) >= 2) {
for (i in 2:length(rltfilename)){
new.data = readRDS(file.path(paste0(getwd(), "/", path, "/rlt/", rltfilename[i])))
for (j in 1:length(new.data)){
modelResultAll <- list.append(modelResultAll, new.data[[j]])
Bayparlist <- rbind(Bayparlist, new.data[[j]]$Baypar)
AllDat_predY <- rbind(AllDat_predY, new.data[[j]]$PredY_list)
AllDat_newY<- rbind(AllDat_newY, new.data[[j]]$NewY_list)
}
}
}
write.csv(Bayparlist, paste0(getwd(), "/", path, "/rlt/AllDat_Bayparlist_", modelversion, ".csv"))
write.csv(AllDat_predY, paste0( getwd(), "/",path, "/rlt/AllDat_predY_", modelversion, ".csv"))
write.csv(AllDat_newY, paste0(getwd(), "/",path, "/rlt/AllDat_newY_", modelversion, ".csv"))
saveRDS(modelResultAll, file = paste0(getwd(), "/", path, "/rlt/modelResultAll_", modelversion, ".rds"))
}
funMergeMRlt(c('Exp1','Exp2','Exp3','Exp4', 'Exp5'), modelPath, modelversion)
AllExpData = read.csv(paste0("../data/AllValidData.csv")) %>%filter(valid == 1)
dur <- sort(unique(AllExpData$curDur))
AllExpData$WMSize <- factor(AllExpData$WMSize, labels = c("low", "medium",  "high"))
# Replace first 3 chracters "Exp" with string "Exp. "
AllExpData$Exp <- gsub("^.{0,3}", "Exp. ", AllExpData$Exp)
AllExpData[which(AllExpData$Exp == 'Exp. 4'),"Exp"] = "Exp. 4a"
AllExpData[which(AllExpData$Exp == 'Exp. 5'),"Exp"] = "Exp. 4b"
## load model Prediction results
AllDat_predY <- read.csv(paste0(modelPath, "/rlt/AllDat_predY_",modelversion,".csv"))
AllDat_predY$WMSize <- as.factor(AllDat_predY$WMSize)
levels(AllDat_predY$WMSize) = c("low", "medium",  "high")
AllDat_predY$pred_Bias = AllDat_predY$mu_r - AllDat_predY$curDur
AllDat_predY$predErr = AllDat_predY$mu_r - AllDat_predY$repDur
AllDat_predY$relatErr = AllDat_predY$predErr / AllDat_predY$repDur
# rename experiments by replacing first 3 chracters "Exp" with string "Exp. "
AllDat_predY$Exp <- gsub("^.{0,3}", "Exp. ", AllDat_predY$Exp)
AllDat_predY[which(AllDat_predY$Exp == 'Exp. 4'),"Exp"] = "Exp. 4a"
AllDat_predY[which(AllDat_predY$Exp == 'Exp. 5'),"Exp"] = "Exp. 4b"
AllDat_predY$Exp = as.factor(AllDat_predY$Exp)
#plot WM correct rates
AllExpData$WMCrr <- AllExpData$TPresent == AllExpData$WMRP
dplyr::group_by(AllExpData, Exp, WMSize, NSub) %>%
dplyr::summarize(m_WMCrr = mean(WMCrr), n = n(), se_WMCrr = sd(WMCrr)/sqrt(n-1)) -> WMCrr
write.csv(WMCrr, paste0(modelPath, '/rlt/WMCrr.csv'))
WMCrr%>%dplyr::group_by(Exp, WMSize)%>%
dplyr::summarize( n = n(),
mean_WMCrr = mean(m_WMCrr), se_WMCrr = sd(m_WMCrr)/sqrt(n-1) ) -> meanForPlot
dat_Exp4b = dplyr::group_by(AllExpData%>%filter(Exp =='Exp. 4b'), WMSize, NSub, gap) %>%
dplyr::summarize(m_WMCrr = mean(WMCrr), n = n(), se_WMCrr = sd(WMCrr)/sqrt(n-1))%>%
dplyr::group_by(gap, WMSize)%>%
dplyr::summarize( n = n(),
mean_WMCrr = mean(m_WMCrr), se_WMCrr = sd(m_WMCrr)/sqrt(n-1))
dat_Exp4b$gap<- factor(dat_Exp4b$gap, labels = c("short", "long"))
plt_WMCrr_Exp4b = ggplot(data = dat_Exp4b,
aes(WMSize, mean_WMCrr, ymin = mean_WMCrr - se_WMCrr, ymax = mean_WMCrr + se_WMCrr,group =gap, color = gap))+
geom_line(aes(linetype = gap), stat = "identity",position = position_dodge(width = 0.2))+
geom_point(aes(shape = gap), stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
coord_cartesian(ylim = c(0.5, 1)) +
scale_color_manual(values=c("#999999", "#56B4E9"))+
labs("Memory load", color = "Gap", shape = "Gap", linetype = "Gap", y = "Mean accuracy in WM task in Exp. 4b") +
theme_new
Exp.labs.1line <- c("Exp. 1 Control", "Exp. 2 Encoding", "Exp. 3 Reproduction", "Exp. 4a Both phases", "Exp. 4b Both phases\n \ \ \ \ \ \ \ \ \ \ \ \ \ with a gap")
plt_WMCrr <- ggplot(meanForPlot, aes(WMSize, mean_WMCrr, ymin = mean_WMCrr - se_WMCrr, ymax = mean_WMCrr + se_WMCrr,
group =Exp, color = Exp))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
coord_cartesian(ylim = c(0.5, 1)) +
labs(x = "Memory load", y = "Mean accuracy in WM task") +
theme_new +scale_color_manual(values=c("#999999", "#E69F00", "#56B4E9", "#1a9641", "#d7191c"), labels = Exp.labs.1line)+
scale_shape_manual(values = Exp.labs.1line)
plt_WMCrr_2<-ggarrange(plt_WMCrr, plt_WMCrr_Exp4b, common.legend = FALSE, ncol=2, nrow=1, widths = c(5.5,4), labels = c("a", "b"))
plt_WMCrr_2
ggsave(paste0(getwd(), "/figures/plt_WMCrr_2.png"), plt_WMCrr_2, width = 9.5, height = 4)
### generate WM correct rates
AllExpData$WMCrr <- AllExpData$TPresent == AllExpData$WMRP
m_wmp<- dplyr::group_by(AllExpData, Exp, WMSize, NSub) %>%
dplyr::summarize(m_WMCrr = mean(WMCrr), n =n(), se_WMCrr = sd(WMCrr)/sqrt(n-1))
# load parameter estimation
Bayparlist <- read.csv(paste0(modelPath, "/rlt/AllDat_Bayparlist_",modelversion,".csv"))
Bayparlist$mu_pr = exp(Bayparlist$mu_pr_log + Bayparlist$sig_pr2_log^2*0.5)
Bayparlist$sig_pr2 = (exp(Bayparlist$sig_pr2_log^2)-1)*exp(2*Bayparlist$mu_pr_log+Bayparlist$sig_pr2_log^2)
# Replace first 3 chracters "Exp" with string "Exp. "
Bayparlist$Exp <- gsub("^.{0,3}", "Exp. ", Bayparlist$Exp)
Bayparlist[which(Bayparlist$Exp == 'Exp. 4'),"Exp"] = "Exp. 4a"
Bayparlist[which(Bayparlist$Exp == 'Exp. 5'),"Exp"] = "Exp. 4b"
Bayparlist$Exp = as.factor(Bayparlist$Exp)
### Average Parameters
mm_Baypar <- dplyr::group_by(Bayparlist, Exp) %>%
dplyr::summarize( m_sig_s2 = mean(sig_s2),
m_sig_pr2_log = mean(sig_pr2_log),
m_ks= mean(ks),
m_kr = mean(kr),
m_ls = mean(ls),
m_ts = mean(ts),
m_mu_pr = mean(mu_pr),
m_sig_pr2 = mean(sig_pr2),
m_mu_pr_log= mean(mu_pr_log),
m_sig_mn2 = mean(sig_mn2),
n= n(),
se_sig_s2 = sd(sig_s2)/sqrt(n-1),
se_sig_mn2 = sd(sig_mn2)/sqrt(n-1),
se_sig_pr2_log = sd(sig_pr2_log)/sqrt(n-1),
se_ks = sd(ks)/sqrt(n-1),
se_kr = sd(kr)/sqrt(n-1),
se_ls =sd(ls)/sqrt(n-1),
se_mu_pr_log = sd(mu_pr_log)/sqrt(n-1))
mm_Baypar
#calculate the mean reproduction biases for the five given intervals for all subjects
mpredY_sub <- dplyr::group_by(AllDat_predY, curDur, Exp, NSub, WMSize) %>%
dplyr::summarize(n = n(),
m_repDur = mean(repDur),
sd_repDur = sd(repDur),
m_mu_r = mean(mu_r),
m_sig_r = mean(sig_r),
m_wp = mean(wp),
se_wp = sd(wp)/sqrt(n-1),
log_lik =mean(log_lik),
cv =sd_repDur/ m_repDur,
pred_cv = mean(sig_r/mu_r),
predRP_err = mean(m_mu_r-m_repDur),
predVar_err = mean(m_sig_r-sd_repDur),
predRP_rerr = mean(abs(m_mu_r-m_repDur)/m_repDur),
predVar_rerr = mean(abs(m_sig_r-sd_repDur)/sd_repDur),
predcv_err = pred_cv-cv,
predcv_rerr = mean(abs(pred_cv-cv)/cv))
write_csv(dplyr::group_by(mpredY_sub, curDur, NSub) %>%
dplyr::summarize(m_cv = mean(cv))%>%spread(curDur, m_cv), paste0(modelPath, '/rlt/m_cv.csv'))
mpredY_sub$RP_bias = mpredY_sub$m_repDur -mpredY_sub$curDur
mpredY_sub_new <- dplyr::group_by(mpredY_sub, curDur, Exp, NSub) %>%
dplyr::summarize(m_RP_bias = mean(RP_bias))%>% spread(curDur, m_RP_bias)
write_csv(mpredY_sub_new%>%filter(Exp == 'Exp. 1'), paste0(modelPath, '/rlt/RP_Bias_exp1.csv'))
write_csv(mpredY_sub_new%>%filter(Exp == 'Exp. 2'), paste0(modelPath, '/rlt/RP_Bias_exp2.csv'))
write_csv(mpredY_sub_new%>%filter(Exp == 'Exp. 3'), paste0(modelPath, '/rlt/RP_Bias_exp3.csv'))
write_csv(mpredY_sub_new%>%filter(Exp == 'Exp. 4a'), paste0(modelPath, '/rlt/RP_Bias_exp4a.csv'))
write_csv(mpredY_sub_new%>%filter(Exp == 'Exp. 4b'), paste0(modelPath, '/rlt/RP_Bias_exp4b.csv'))
mpredY_sub_WMsize <- dplyr::group_by(mpredY_sub, WMSize, Exp, NSub) %>%
dplyr::summarize(m_RP_bias = mean(RP_bias))%>% spread(WMSize, m_RP_bias)
write_csv(mpredY_sub_WMsize%>%filter(Exp == 'Exp. 3'), paste0(modelPath, '/rlt/RP_Bias_WMsize_exp3.csv'))
write_csv(mpredY_sub_WMsize%>%filter(Exp == 'Exp. 4a'), paste0(modelPath, '/rlt/RP_Bias_WMsize_exp4a.csv'))
write_csv(mpredY_sub_WMsize%>%filter(Exp == 'Exp. 4b'), paste0(modelPath, '/rlt/RP_Bias_WMsize_exp4b.csv'))
#### predicted data
m_predY <- mpredY_sub%>%
dplyr::group_by(Exp, curDur, WMSize) %>%
dplyr::summarize(m_m_repDur = mean(m_repDur),
m_sd_repDur = mean(sd_repDur),
m_m_sig_r =mean(m_sig_r),
m_m_mu_r = mean(m_mu_r),
m_m_wp = mean(m_wp),
n = n(),
m_se_wp = sd(se_wp)/sqrt(n-1),
log_lik =mean(log_lik),
mpredRP_err = mean(predRP_err),
mpredVar_err = mean(predVar_err),
mpredRP_rerr = mean(predRP_rerr),
mpredVar_rerr = mean(predVar_rerr),
cv= mean(cv),
pred_cv = mean(pred_cv),
mpredcv_err = mean(predcv_err),
mpredcv_rerr = mean(predcv_rerr))
m_predY_acc =  mpredY_sub%>%
dplyr::group_by(Exp) %>%
dplyr::summarize(mpred_rerr = mean(predRP_rerr)*100,
mpredVar_rerr = mean(predVar_rerr)*100,
mpredcv_rerr = mean(predcv_rerr)*100)
m_predY_acc
#extract waic and loo-cv from parameter list
m_WAIC <- dplyr::group_by(Bayparlist, Exp) %>%
dplyr::summarize(n =n(),
m_looic = mean(looic),
m_waic = mean(waic),
se_waic = sd(waic)/sqrt(n-1),
se_looic = sd(looic)/sqrt(n-1),
m_p_loo = mean(p_loo),
m_elpd_loo = mean(elpd_loo),
m_se_looic = mean(se_looic),
m_se_p_loo = mean(se_p_loo),
m_p_waic = mean(p_waic),
m_se_waic = mean(se_waic))
m_WAIC
#load test results
AllDat_newY <- read.csv(paste0(modelPath, "/rlt/AllDat_newY_",modelversion,".csv"))
AllDat_newY$WMSize <- as.factor(AllDat_newY$WMSize)
levels(AllDat_newY$WMSize) = c("low", "medium",  "high")
# Replace first 3 chracters "Exp" with string "Exp. "
AllDat_newY$Exp <- gsub("^.{0,3}", "Exp. ", AllDat_newY$Exp)
AllDat_newY[which(AllDat_newY$Exp == 'Exp. 4'),"Exp"] = "Exp. 4a"
AllDat_newY[which(AllDat_newY$Exp == 'Exp. 5'),"Exp"] = "Exp. 4b"
AllDat_newY$Exp = as.factor(AllDat_newY$Exp)
m_newY <- dplyr::group_by(AllDat_newY, Exp, curDur, WMSize) %>%
dplyr::summarize(m_mu_r = mean(mu_r),
m_sig_r = mean(sig_r),
log_lik =mean(log_lik))
Exp.labs.2lines <- c("Exp. 1\n Control", "Exp. 2\n Encoding", "Exp. 3\n Reproduction", "Exp. 4a\n Both", "Exp. 4b\n Both, with a gap")
names(Exp.labs.2lines) <- c("Exp. 1", "Exp. 2", "Exp. 3", "Exp. 4a", "Exp. 4b")
RP_bias  <- ggplot(data = m_predY%>%filter(Exp !="Exp. 4b"), aes(x = curDur, y = m_m_repDur - curDur, color=as.factor(WMSize), shape = as.factor(WMSize))) +
geom_point(size=2, alpha = 0.5)+
geom_line(data= m_newY%>%filter(Exp !="Exp. 4b"), aes(x=curDur, y=m_mu_r-curDur, color=WMSize)) +
geom_hline(yintercept = 0, linetype='dashed')+
facet_grid(cols = vars(Exp), labeller = labeller(Exp = Exp.labs.2lines)) +
labs(x=" ", y="Reproduction bias (s)", shape ="Memory Load", color = "Memory Load")+theme_new+
colorSet3+
theme(legend.position = "top")+ylim(-0.6, 0.4)
ggsave(paste0(getwd(), "/", modelPath, "/figures/RP_bias.png"), RP_bias, width = 6, height = 3)
RP_bias
AllDat_predY[which(AllDat_predY$Exp != "Exp. 4b"), "gap"] = 1
AllDat_predY$gap = factor(AllDat_predY$gap, labels = c("short", "long"))
AllDat_newY$gap = 1
AllDat_newY[which(AllDat_newY$Gap == 2500, AllDat_newY$Exp == "Exp. 4b"), "gap"] = 2
AllDat_newY$gap = factor(AllDat_newY$gap, labels = c("short", "long"))
RP_bias_Exp4b  <- ggplot(data = AllDat_predY %>% filter(Exp == 'Exp. 4b')%>%
dplyr::group_by(Exp, curDur, WMSize, gap) %>%
dplyr::summarize(m_mu_r = mean(mu_r), m_repDur = mean(repDur), n= n(), se_mu_r = sd(mu_r)/sqrt(n-1)), aes(x = curDur, y = m_repDur - curDur, group = interaction(gap, WMSize), color=as.factor(WMSize), shape = gap)) +
geom_point(size=2, alpha = 0.5)+
geom_line(data= AllDat_newY %>% filter(Exp == 'Exp. 4b') %>%
dplyr::group_by(Exp, curDur, WMSize, gap) %>%
dplyr::summarize(m_mu_r = mean(mu_r),  n= n(), se_mu_r = sd(mu_r)/sqrt(n-1)), aes(x=curDur, y=m_mu_r-curDur, group = interaction(WMSize, gap), linetype = gap, color=WMSize)) +
geom_hline(yintercept = 0, linetype='dashed')+
facet_grid(cols = vars(Exp), labeller = labeller(Exp = Exp.labs.2lines)) +
labs(x=" ", y="Reproduction bias (s)", shape ="Gap", linetype = "Gap", color = "Memory Load")+theme_new+
colorSet3+
theme(legend.position = "top")+ylim(-0.6, 0.4)
RP_bias_Exp4b
## Figures in the MS
RP_bias_all<-ggarrange(RP_bias, RP_bias_Exp4b, common.legend = FALSE, ncol=2, nrow=1, widths = c(4,2),  labels = c("a", "b"))
#ggsave(paste0(getwd(), "/", modelPath, "/figures/fig3.png"), fig3, width = 6, height = 5)
RP_bias_all
RP_bias_1_4b <- ggplot(data = AllDat_predY %>%
dplyr::group_by(Exp, curDur, WMSize, gap) %>%
dplyr::summarize(m_mu_r = mean(mu_r), m_repDur = mean(repDur), n= n(), se_mu_r = sd(mu_r)/sqrt(n-1)), aes(x = curDur, y = m_repDur - curDur, group = interaction(gap, WMSize), color=as.factor(WMSize), shape = as.factor(WMSize))) +
geom_point(size=2, alpha = 0.5)+
geom_line(data= AllDat_newY %>%
dplyr::group_by(Exp, curDur, WMSize, gap) %>%
dplyr::summarize(m_mu_r = mean(mu_r),  n= n(), se_mu_r = sd(mu_r)/sqrt(n-1)), aes(x=curDur, y=m_mu_r-curDur, group = interaction(WMSize, gap), linetype = gap, color=WMSize)) +
geom_hline(yintercept = 0, linetype='dashed')+
facet_grid(cols = vars(Exp), labeller = labeller(Exp = Exp.labs.2lines)) +
labs(x=" ", y="Reproduction bias (s)", shape ="Memory Load", linetype = "Gap", color = "Memory Load")+theme_new+
colorSet3+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/RP_bias_1_4b.png"), RP_bias_1_4b, width = 9, height = 4)
RP_bias_1_4b
RP_bias_obs  <- ggplot(data = AllExpData %>%
dplyr::group_by(Exp, curDur, WMSize, NSub) %>%
dplyr::summarize(n = n(),
m_repDur = mean(repDur),
se_repDur = sd(repDur)/sqrt(n-1)) %>%
dplyr::group_by(Exp, curDur, WMSize) %>%
dplyr::summarize(m_m_repDur = mean(m_repDur),
m_se_repDur = mean(se_repDur)), aes(x = curDur, y = m_m_repDur-curDur,  shape = as.factor(WMSize), color=as.factor(WMSize))) +
geom_point()+
geom_line()+
geom_errorbar(width=.1,  aes(ymin = m_m_repDur-curDur - m_se_repDur, ymax = m_m_repDur -curDur + m_se_repDur)) +
geom_hline(yintercept = 0, linetype='dashed')+
facet_grid(cols = vars(Exp), labeller = labeller(Exp = Exp.labs.2lines)) +
labs(x="Sample intervals (s)", y="Reproduction bias(s)", shape="Memory Load", color = "Memory Load")+
theme_new+colorSet3+
scale_x_continuous(breaks=seq(0, 1.6, 0.4))+ theme(legend.position="top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/RP_bias_obs.png"), RP_bias_obs, width = 6, height = 3)
RP_bias_obs
AllExpData[which(AllExpData$Exp != "Exp. 4b"), "gap"] = 1
AllExpData$gap = factor(AllExpData$gap, labels = c("short", "long"))
RP_bias_obs_gap  <- ggplot(data = AllExpData %>%
dplyr::group_by(Exp, curDur, WMSize, NSub, gap) %>%
dplyr::summarize(n = n(),
m_repDur = mean(repDur),
se_repDur = sd(repDur)/sqrt(n-1)) %>%
dplyr::group_by(Exp, curDur, WMSize, gap) %>%
dplyr::summarize(m_m_repDur = mean(m_repDur),
m_se_repDur = mean(se_repDur)), aes(x = curDur, y = m_m_repDur-curDur,shape = as.factor(WMSize), color=as.factor(WMSize), linetype = factor(gap))) +
geom_point()+
geom_line()+
geom_errorbar(width=.1,  aes(ymin = m_m_repDur-curDur - m_se_repDur, ymax = m_m_repDur -curDur + m_se_repDur, linetype = gap)) +
geom_hline(yintercept = 0, linetype='dashed')+
facet_grid(cols = vars(Exp), labeller = labeller(Exp = Exp.labs.2lines)) +
labs(x="Sample intervals (s)", y="Reproduction bias(s)", shape="Memory Load", color = "Memory Load", linetype = "Gap")+
theme_new+colorSet3+
scale_x_continuous(breaks=seq(0, 1.6, 0.4))+ theme(legend.position="top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/RP_bias_obs_gap.png"), RP_bias_obs_gap, width = 9, height = 4)
RP_bias_obs_gap
plt_wp <- ggplot(data = AllDat_predY %>%dplyr::group_by(NSub, Exp, WMSize) %>% dplyr::summarise(m_wp = mean(wp)) %>%dplyr::group_by(Exp, WMSize) %>% dplyr::summarise(mm_wp = mean(m_wp), n= n(), m_se_wp = sd(m_wp)/sqrt(n-1)), aes(Exp, mm_wp, ymin = mm_wp - m_se_wp, ymax = mm_wp + m_se_wp, group =interaction(Exp, WMSize), color = WMSize, shape = as.factor(WMSize)))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
colorSet5+
labs(x = "", y = TeX("Weight of the prior $w_p$"), color = 'Memory Load', shape = 'Memory Load') + #scale_x_discrete(labels= Exp.labs.2lines)+
theme_new + theme(legend.position="top")
plt_wp
ggsave(paste0(getwd(), "/", modelPath, "/figures/plt_wp.png"), plt_wp, width = 3, height = 3)
AllDat_predY$gap = 1
AllDat_predY[which(AllDat_predY$Gap == 2500),"gap"] = 2
AllDat_predY$gap <- factor(AllDat_predY$gap, labels = c("short", "long"))
plt_wp_gap <- ggplot(data = AllDat_predY %>%dplyr::group_by(NSub, Exp, WMSize, gap) %>% dplyr::summarise(m_wp = mean(wp)) %>%dplyr::group_by(Exp, WMSize, gap) %>% dplyr::summarise(mm_wp = mean(m_wp), n= n(), m_se_wp = sd(m_wp)/sqrt(n-1)), aes(Exp, mm_wp, ymin = mm_wp - m_se_wp, ymax = mm_wp + m_se_wp, group =interaction(Exp, WMSize, gap), color = WMSize, linetype = as.factor(gap), shape = as.factor(WMSize)))+
geom_line(stat = "identity", position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  position = position_dodge(width = 0.2)) +
colorSet5+
labs(x = "", y = TeX("Weight of the prior $w_p$"), color = 'Memory Load', shape = 'Memory Load', linetype= 'gap') + #scale_x_discrete(labels= Exp.labs.2lines)+
theme_new + theme(legend.position="top")
plt_wp_gap
#Observed Indifference Point for Exp. 4b
obs_model <- function(df) {
lm(repDur ~ curDur, data = df)
}
#Observed Indifference Point
obs_Inp_list <- AllDat_predY %>%
dplyr::group_by(NSub, Exp, WMSize, gap) %>% nest()  %>%
mutate(model = map(data, obs_model)) %>%  # linear regression
mutate(slope = map(model, broom::tidy)) %>%  # get estimates
unnest(slope, .drop = TRUE) %>% # remove raw data
dplyr::select(-std.error,-statistic, -p.value) %>%  # remove unnessary columns
spread(term, estimate) %>%   # spread stimates
dplyr::rename(Intercept = `(Intercept)`, slope = curDur)  # rename columns
obs_Inp_list$model = NULL
obs_Inp_list$data = NULL
obs_Inp_list$inP = obs_Inp_list$Intercept /(1-obs_Inp_list$slope)
obs_Inp_list$slope = -1 * obs_Inp_list$slope
obs_Inp_list_no_gap <- AllDat_predY %>%
dplyr::group_by(NSub, Exp, WMSize) %>% nest()  %>%
mutate(model = map(data, obs_model)) %>%  # linear regression
mutate(slope = map(model, broom::tidy)) %>%  # get estimates
unnest(slope, .drop = TRUE) %>% # remove raw data
dplyr::select(-std.error,-statistic, -p.value) %>%
spread(term, estimate) %>%   # spread stimates
dplyr::rename(Intercept = `(Intercept)`, slope = curDur)  # rename columns
obs_Inp_list_no_gap$model = NULL
obs_Inp_list_no_gap$data = NULL
obs_Inp_list_no_gap$inP = obs_Inp_list_no_gap$Intercept /(1-obs_Inp_list_no_gap$slope)
obs_Inp_list_no_gap$slope = -1 * obs_Inp_list_no_gap$slope
ezANOVA(data = obs_Inp_list%>%filter(Exp =='Exp. 4b'), dv= inP, wid=NSub, within= .(gap, WMSize) )
# plot the observed indifference points and slopes of RP
plt_obs_InP_slope_err<- ggplot(data = obs_Inp_list %>% group_by(Exp, WMSize)%>%
dplyr::summarise(n=n(),
m_inP = mean(inP),
se_inP = sd(inP)/sqrt(n-1),
m_slope = mean(slope),
se_slope = sd(slope)/sqrt(n-1)), aes(x= m_slope, y=m_inP, color = WMSize, shape = WMSize))+
geom_line(stat = "identity")+
geom_point(stat = "identity")+
geom_errorbar(width = 0.02, aes(ymin = m_inP - se_inP, ymax = m_inP + se_inP)) +
geom_errorbarh(height =0.02, aes(xmin = m_slope - se_slope, xmax = m_slope + se_slope)) +
theme_new+
labs(colour = "Memory Load", shape = "Memory Load")+colorSet3+
facet_grid(~Exp)+
xlab('slope of reproduction bias')+ylab("indifference point (s)")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/plt_obs_InP_slope_err.png"), plt_obs_InP_slope_err, width = 5, height = 5)
plt_obs_InP_slope_err
#Predicated Indifference Point for Exp.4b
pred_model <- function(df) {
lm(mu_r ~ curDur, data = df)
}
pred_Inp_list <- AllDat_predY %>%
dplyr::group_by(NSub, Exp, WMSize, gap) %>% nest()  %>%
mutate(model = map(data, pred_model)) %>%  # linear regression
mutate(slope = map(model, broom::tidy)) %>%  # get estimates
unnest(slope, .drop = TRUE) %>% # remove raw data
dplyr::select(-std.error,-statistic, -p.value) %>%  # remove unnessary columns
spread(term, estimate) %>%   # spread stimates
dplyr::rename(Intercept = `(Intercept)`, pred_slope = curDur)  # rename columns
pred_Inp_list$model = NULL
pred_Inp_list$data = NULL
pred_Inp_list$pred_inP = pred_Inp_list$Intercept /(1-pred_Inp_list$pred_slope)
pred_Inp_list$pred_slope = -1 * pred_Inp_list$pred_slope
pred_Inp_slope_no_gap <- AllDat_predY %>%
dplyr::group_by(NSub, Exp, WMSize) %>% nest()  %>%
mutate(model = map(data, pred_model)) %>%  # linear regression
mutate(slope = map(model, broom::tidy)) %>%  # get estimates
unnest(slope, .drop = TRUE) %>% # remove raw data
dplyr::select(-std.error,-statistic, -p.value) %>%  # remove unnessary columns
spread(term, estimate) %>%   # spread stimates
dplyr::rename(Intercept = `(Intercept)`, pred_slope = curDur)  # rename columns
pred_Inp_slope_no_gap$model = NULL
pred_Inp_slope_no_gap$data = NULL
pred_Inp_slope_no_gap$pred_inP = pred_Inp_slope_no_gap$Intercept /(1-pred_Inp_slope_no_gap$pred_slope)
pred_Inp_slope_no_gap$pred_slope = -1 * pred_Inp_slope_no_gap$pred_slope
m_pred_Inp_slope_no_gap = pred_Inp_slope_no_gap %>% group_by(Exp, WMSize)%>%
dplyr::summarise(n=n(),
m_Intercept = mean(Intercept),
se_Intercept= sd(Intercept)/sqrt(n-1),
m_pred_inP = mean(pred_inP),
se_pred_inP = sd(pred_inP)/sqrt(n-1),
m_pred_slope = mean(pred_slope),
se_pred_slope = sd(pred_slope)/sqrt(n-1))
# plot the observed indifference points and slopes of RP
plt_pred_InP_slope_err<- ggplot(data = m_pred_Inp_slope_no_gap, aes(x= m_pred_slope, y=m_pred_inP, color = WMSize, shape = WMSize))+
geom_line(stat = "identity")+geom_point(stat = "identity")+
geom_errorbar(width = 0.02, aes(ymin = m_pred_inP - se_pred_inP, ymax = m_pred_inP + se_pred_inP)) +
geom_errorbarh(height =0.02, aes(xmin = m_pred_slope - se_pred_slope, xmax = m_pred_slope + se_pred_slope)) +
geom_point(data = obs_Inp_list%>% group_by(Exp, WMSize)%>%
dplyr::summarise(n=n(),
m_inP = mean(inP),
se_inP = sd(inP)/sqrt(n-1),
m_slope = mean(slope),
se_slope = sd(slope)/sqrt(n-1)), aes(x= m_slope, y =m_inP, color = WMSize, shape = WMSize))+
theme_new+
labs(colour = "Memory Load", shape = "Memory Load")+colorSet3+
facet_grid(~Exp)+
xlab('slope of reproduction')+ylab("indifference point (s)")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/plt_pred_InP_slope_err.png"), plt_pred_InP_slope_err, width = 5, height = 5)
plt_pred_InP_slope_err
InP_obs<-  ggplot(data = obs_Inp_list_no_gap %>%dplyr::group_by(WMSize, Exp) %>%dplyr::summarise(m_inP = mean(inP), se_inP = sd(inP)/sqrt(n()-1)), aes(x= Exp, y=m_inP, color = WMSize, shape = WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  aes(ymin = m_inP - se_inP, ymax = m_inP + se_inP), position = position_dodge(width = 0.2)) +theme_new+
labs(colour = "Memory Load", shape = "Memory Load")+colorSet3+
xlab(' ')+ylab("observed indifference point (s)")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/InP_obs.png"), InP_obs, width = 3, height = 3)
InP_obs
InP_pred<-  ggplot(data = m_pred_Inp_slope_no_gap, aes(x= Exp, y=m_pred_inP, color = WMSize, shape = WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  aes(ymin = m_pred_inP - se_pred_inP, ymax = m_pred_inP + se_pred_inP), position = position_dodge(width = 0.2)) +theme_new+
labs(colour = "Memory Load", shape = "Memory Load")+colorSet3+ #scale_x_discrete(labels= Exp.labs.2lines)+
xlab(' ')+ylab("indifference point (s)")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/InP_pred.png"), InP_pred, width = 3, height = 3)
InP_pred
InP_pred2<-  ggplot(data = m_pred_Inp_slope_no_gap, aes(x= Exp, y=m_pred_inP, color = WMSize, shape = WMSize))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.2,  aes(ymin = m_pred_inP - se_pred_inP, ymax = m_pred_inP + se_pred_inP), position = position_dodge(width = 0.2)) +theme_new+
labs(colour = "Memory Load", shape = "Memory Load")+colorSet3+ #scale_x_discrete(labels= Exp.labs.2lines)+
xlab(' ')+ylab("indifference point (s)")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/InP_pred2.png"), InP_pred2, width = 3, height = 3)
InP_pred2
### Calculate predication error
Inp_list_no_gap = left_join(obs_Inp_list_no_gap, pred_Inp_slope_no_gap, by = c("NSub", "Exp", "WMSize"))
Inp_list_no_gap$InP_err = Inp_list_no_gap$pred_inP -Inp_list_no_gap$inP
Inp_list_no_gap$InP_rerr = 100*Inp_list_no_gap$InP_err/ Inp_list_no_gap$inP
Inp_list_no_gap$slope_err = Inp_list_no_gap$pred_slope - Inp_list_no_gap$slope
Inp_list_no_gap$slope_rerr = 100* Inp_list_no_gap$slope_err/Inp_list_no_gap$slope
m_Inp_list_no_gap = Inp_list_no_gap %>% dplyr::group_by(Exp) %>% dplyr::summarise(m_InP_rerr = mean(InP_rerr), m_slope_rerr = mean(slope_rerr), m_InP_rerr_abs = mean(abs(InP_rerr)), m_slope_rerr_abs = mean(abs(slope_rerr)))
m_Inp_list_no_gap$InP_auc = 100- m_Inp_list_no_gap$m_InP_rerr_abs
m_Inp_list_no_gap$slope_auc = 100-  m_Inp_list_no_gap$m_slope_rerr_abs
#plot the predicated indifference points and slope of predicated RP
plt_pred_InP_slope_err<- ggplot(data = obs_Inp_list_no_gap%>% dplyr::group_by(Exp, WMSize)%>%
dplyr::summarise(n=n(),
m_inP = mean(inP),
se_inP = sd(inP)/sqrt(n-1),
m_slope = mean(slope),
se_slope = sd(slope)/sqrt(n-1)), aes(x= m_slope, y=m_inP, shape = WMSize, color = WMSize))+
geom_line(stat = "identity")+
geom_point(stat = "identity")+
geom_errorbar(width = 0.02, aes(ymin = m_inP - se_inP, ymax = m_inP + se_inP)) +
geom_errorbarh(height =0.02, aes(xmin = m_slope - se_slope, xmax = m_slope + se_slope)) +
theme_new+
labs(colour = "Memory Load", shape = "Memory Load") +colorSet3+
facet_grid(~Exp)+
xlab('slope of reproduction')+ylab("indifference point (s)")+
theme(legend.position = "top")
ggsave(paste0(getwd(), "/", modelPath, "/figures/plt_pred_InP_slope_err.png"), plt_pred_InP_slope_err, width = 5, height = 5)
plt_pred_InP_slope_err
## Figures in the MS
fig3<-ggarrange(RP_bias, plt_pred_InP_slope_err, common.legend = TRUE, ncol=1, nrow=2,  labels = c("a", "b"))
ggsave(paste0(getwd(), "/", modelPath, "/figures/fig3.png"), fig3, width = 6, height = 5)
fig3
## combine InP and wp
fig4_gap<-ggarrange(plt_wp_gap, InP_pred_gap, common.legend = TRUE, ncol=2, nrow=1,  labels = c("a", "b"))
plt_InP_linear_gap<- ggplot(data = m_obs_Inp_list, aes(x=WMSize, y=m_inP, group = gap, color = gap))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.3,  aes(ymin = m_inP - se_inP, ymax = m_inP + se_inP), position = position_dodge(width = 0.2)) +theme_new+
labs(colour = "Gap")+colorSet3+
facet_wrap(~Exp)+
xlab(' ')+ylab("indifference point (s)")+guides(shape="none")+
theme(legend.position = "top")
m_obs_Inp_list
plt_RP_slope_linear_gap<- ggplot(data = m_obs_Inp_list, aes(x= WMSize, y=m_slope, group = gap,color = gap, shape = gap))+
geom_line(stat = "identity",position = position_dodge(width = 0.2))+
geom_point(stat = "identity",position = position_dodge(width = 0.2))+
geom_errorbar(width=.3,  aes(ymin = m_slope - se_slope, ymax = m_slope + se_slope), position = position_dodge(width = 0.2)) +theme_new+
facet_wrap(~Exp)+
labs(colour = "Gap", shape = "Gap")+colorSet3+
xlab(' ')+ylab("Slope of reproduction bias")+
theme(legend.position = "top")
